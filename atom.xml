<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Newton&#39;s</title>
  
  <subtitle>太阳黑子 | 力量、明智和运气</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.newtonsz.com/"/>
  <updated>2018-03-12T12:18:29.585Z</updated>
  <id>https://www.newtonsz.com/</id>
  
  <author>
    <name>Newton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo工作原理——Hexo+Node.js+Coding</title>
    <link href="https://www.newtonsz.com/2018/03/12/Hexo%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://www.newtonsz.com/2018/03/12/Hexo工作原理/</id>
    <published>2018-03-12T12:18:29.585Z</published>
    <updated>2018-03-12T12:18:29.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo工作原理"><a href="#Hexo工作原理" class="headerlink" title="Hexo工作原理"></a>Hexo工作原理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo工作原理&quot;&gt;&lt;a href=&quot;#Hexo工作原理&quot; class=&quot;headerlink&quot; title=&quot;Hexo工作原理&quot;&gt;&lt;/a&gt;Hexo工作原理&lt;/h1&gt;
      
    
    </summary>
    
      <category term="程序与算法" scheme="https://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="技术" scheme="https://www.newtonsz.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(二)——代码框架</title>
    <link href="https://www.newtonsz.com/2018/03/12/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E4%BA%8C)%E2%80%94%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.newtonsz.com/2018/03/12/Openstack学习与总结(二)—代码框架/</id>
    <published>2018-03-12T08:27:09.465Z</published>
    <updated>2018-03-12T12:12:25.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（二）：代码框架"><a href="#Openstack学习与总结（二）：代码框架" class="headerlink" title="Openstack学习与总结（二）：代码框架"></a>Openstack学习与总结（二）：代码框架</h1><p>学习Openstack，我的学习方法是以<strong>源码</strong>为核心，参考活跃度极高的 <strong>开源社区</strong>以及规范清晰的<strong>官方文档</strong>为主，其他资源为辅，动手实践贯穿其中。</p><h2 id="Openstack开发基础"><a href="#Openstack开发基础" class="headerlink" title="Openstack开发基础"></a>Openstack开发基础</h2><p>Openstack系统真正意义上运行起来，主要依靠其源码以及源码的运行环境，即所谓的系统开发环境。对于开发人员来说，涉及的基础知识有以下方面：</p><ol><li>Python编程。Python是Openstack的主要开发语言，掌握Python语言的基础语法、高级特性、熟悉各种Python egg包以及调试部署工具等即可。</li><li>Linux环境编程。Openstack系统主要部署在类Unix的操作系统之上，故Linux的基本操作以及环境编程知识是必备的。</li><li>网络基础知识。Openstack的Neutron项目主要涉及网络的管理与配置，故TCP/IP网络基础知识也是不可或缺的。</li><li>虚拟化。虚拟化技术是云计算的基石，理解虚拟化有助于深入理解比较底层系统的运行机制。</li></ol><p>总而言之，计算机五大件是永恒的话题。</p><h2 id="Openstack部署"><a href="#Openstack部署" class="headerlink" title="Openstack部署"></a>Openstack部署</h2><p>对于部署任何项目，其操作步骤不可避免的分为以下几步：</p><ol><li>获得源码。</li><li>配置系统环境以及源码依赖源。</li><li>安装部署。</li><li>HelloWorld测试。</li></ol><h2 id="Openstack源码地图"><a href="#Openstack源码地图" class="headerlink" title="Openstack源码地图"></a>Openstack源码地图</h2><blockquote><p>整体了解，逐个击破。</p></blockquote><p>对于大多数项目而言，它的编译系统基本可看成源码地图，类似的例如Linux内核源码各级目录的<code>Kconfig</code>和<code>Makefile</code>文件，可帮助我们理清代码之间的脉络和联系。OpenStack项目的目录结构并不是根据组件严格划分，而是根据功能划分，Openstack的每个子项目下面都有<code>setup.py</code>和<code>setup.cfg</code> 两个文件，现已nova项目为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.py</span></span><br><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> multiprocessing  <span class="comment"># noqa</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">setuptools.setup(</span><br><span class="line">    setup_requires=[<span class="string">'pbr&gt;=2.0.0'</span>],</span><br><span class="line">    pbr=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>这段代码仅仅只是调用了setup函数，这里使用pbr工具（Python Build Reasonableness）去读取和过滤setup.cfg中的数据，并将解析后的结果作为自己的参数。OpenStack所有项目都是基于Python开发，都是标准的Python项目，通过setuptools工具管理项目，负责Python包的安装和分发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.cfg</span></span><br><span class="line">[metadata]</span><br><span class="line">name = nova</span><br><span class="line">summary = Cloud computing fabric controller</span><br><span class="line">description-file =</span><br><span class="line">    README.rst</span><br><span class="line">author = OpenStack</span><br><span class="line">author-email = openstack-dev@lists.openstack.org</span><br><span class="line">home-page = https://docs.openstack.org/nova/latest/</span><br><span class="line">classifier =</span><br><span class="line">    Environment :: OpenStack</span><br><span class="line">    Intended Audience :: Information Technology</span><br><span class="line">    Intended Audience :: System Administrators</span><br><span class="line">    License :: OSI Approved :: Apache Software License</span><br><span class="line">    Operating System :: POSIX :: Linux</span><br><span class="line">    Programming Language :: Python</span><br><span class="line">    Programming Language :: Python :: <span class="number">2</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">2.7</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">3</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">setup-hooks =</span><br><span class="line">    pbr.hooks.setup_hook</span><br><span class="line"></span><br><span class="line">[files]</span><br><span class="line">data_files =</span><br><span class="line">    etc/nova =</span><br><span class="line">        etc/nova/api-paste.ini</span><br><span class="line">        etc/nova/rootwrap.conf</span><br><span class="line">    etc/nova/rootwrap.d = etc/nova/rootwrap.d/*</span><br><span class="line">packages =</span><br><span class="line">    nova</span><br><span class="line"></span><br><span class="line">[entry_points]</span><br><span class="line">oslo.config.opts =</span><br><span class="line">    nova.conf = nova.conf.opts:list_opts</span><br><span class="line">oslo.config.opts.defaults =</span><br><span class="line">    nova.conf = nova.common.config:set_middleware_defaults</span><br><span class="line">oslo.policy.enforcer =</span><br><span class="line">    nova = nova.policy:get_enforcer</span><br><span class="line">oslo.policy.policies =</span><br><span class="line">    nova = nova.policies:list_rules</span><br><span class="line">nova.compute.monitors.cpu =</span><br><span class="line">    virt_driver = nova.compute.monitors.cpu.virt_driver:Monitor</span><br><span class="line"></span><br><span class="line">console_scripts =</span><br><span class="line">    nova-all = nova.cmd.all:main</span><br><span class="line">    nova-api = nova.cmd.api:main</span><br><span class="line">    nova-api-metadata = nova.cmd.api_metadata:main</span><br><span class="line">    nova-api-os-compute = nova.cmd.api_os_compute:main</span><br><span class="line">    nova-cells = nova.cmd.cells:main</span><br><span class="line">    nova-cert = nova.cmd.cert:main</span><br><span class="line">    nova-compute = nova.cmd.compute:main</span><br><span class="line">    nova-conductor = nova.cmd.conductor:main</span><br><span class="line">    nova-console = nova.cmd.console:main</span><br><span class="line">    nova-consoleauth = nova.cmd.consoleauth:main</span><br><span class="line">    nova-dhcpbridge = nova.cmd.dhcpbridge:main</span><br><span class="line">    nova-idmapshift = nova.cmd.idmapshift:main</span><br><span class="line">    nova-manage = nova.cmd.manage:main</span><br><span class="line">    nova-network = nova.cmd.network:main</span><br><span class="line">    nova-novncproxy = nova.cmd.novncproxy:main</span><br><span class="line">    nova-rootwrap = oslo_rootwrap.cmd:main</span><br><span class="line">    nova-rootwrap-daemon = oslo_rootwrap.cmd:daemon</span><br><span class="line">    nova-scheduler = nova.cmd.scheduler:main</span><br><span class="line">    nova-serialproxy = nova.cmd.serialproxy:main</span><br><span class="line">    nova-spicehtml5proxy = nova.cmd.spicehtml5proxy:main</span><br><span class="line">    nova-xvpvncproxy = nova.cmd.xvpvncproxy:main</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>配置文件为项目的元数据，entry_points是代码的入口，是用来支持动态发现服务和插件的，也用来支持自动生成脚本。console_scripts中的每个entry_points都表示有一个可执行文件脚本会被生成并被安装，即可在控制台上直接执行它，这些entry_points可以理解为整个nova项目所提供各个服务的入口点。</p><p>继续沿着代码的脉络往下走，以nova-compute服务的入口函数为例，即nova.cmd.compute:main。</p><blockquote><p>nova.cmd.compute:main(/nova/cmd/compute.py中的main函数:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config.parse_args(sys.argv)</span><br><span class="line">    logging.setup(CONF, <span class="string">'nova'</span>)</span><br><span class="line">    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))</span><br><span class="line">    utils.monkey_patch()</span><br><span class="line">    objects.register_all()</span><br><span class="line">    gmr_opts.set_defaults(CONF)</span><br><span class="line">    <span class="comment"># Ensure os-vif objects are registered and plugins loaded</span></span><br><span class="line">    os_vif.initialize()</span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    cmd_common.block_db_access(<span class="string">'nova-compute'</span>)</span><br><span class="line">    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()</span><br><span class="line">    objects.Service.enable_min_version_cache()</span><br><span class="line">    server = service.Service.create(binary=<span class="string">'nova-compute'</span>,</span><br><span class="line">                                    topic=compute_rpcapi.RPC_TOPIC)</span><br><span class="line">    service.serve(server)</span><br><span class="line">    service.wait()</span><br></pre></td></tr></table></figure><p>由于OpenStack使用python语言开发，而python是动态类型语言，参数类型不容易从代码中看出，因此必须部署一个allinone的OpenStack开发测试环境，建议使用RDO部署：<a href="https://www.rdoproject.org/install/quickstart/" target="_blank" rel="noopener">Packstack quickstart</a></p><p>要想深入研究源码，最有效的方式就是一步一步跟踪代码执行，因此会使用debug工具是关键技能之一。python的debug工具有很多，为了简便起见，pdb工具就够了。使用方法也非常简单，只要在你想设置断点的地方，嵌入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb; pdb.set_trace()</span><br></pre></td></tr></table></figure><p>此时调用创建虚拟机API，nova-api进程就会马上弹出pdb shell，此时你可以通过<code>s</code>或者<code>n</code>命令一步一步执行了。</p><h2 id="Openstack源码通用代码抽象"><a href="#Openstack源码通用代码抽象" class="headerlink" title="Openstack源码通用代码抽象"></a>Openstack源码通用代码抽象</h2><p>通常一个服务的目录都会包含<code>api.py</code>、<code>rpcapi.py</code>、<code>manager.py</code>这个三个是最重要的模块。</p><ul><li><code>api.py</code>： 通常是供其它组件调用的封装库。换句话说，该模块通常并不会由本模块调用。比如compute目录的api.py，通常由nova-api服务的controller调用。</li><li><code>rpcapi.py</code>：这个是RPC请求的封装，或者说是RPC封装的client端，该模块封装了RPC请求调用。</li><li><code>manager.py</code>： 这个才是真正服务的功能实现，也是RPC的server端，即处理RPC请求的入口，实现的方法通常和rpcapi实现的方法一一对应。</li></ul><p>所有的API入口都是从xxx-api开始的，RESTFul API是OpenStack服务的唯一入口，换言之，阅读源码就从api开始。</p><h2 id="虚拟机执行关键步骤"><a href="#虚拟机执行关键步骤" class="headerlink" title="虚拟机执行关键步骤"></a>虚拟机执行关键步骤</h2><p><strong>API节点</strong><br>nova-api接收用户请求 -&gt; nova-api调用compute/api.py -&gt; compute/api调用compute/rpcapi.py -&gt; rpcapi.py向目标计算节点发起stop_instance()RPC请求。</p><p><strong>计算节点</strong><br>收到stop_instance()请求 -&gt; 调用compute/manager.py的callback方法stop_instance() -&gt; 调用libvirt关机虚拟机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（二）：代码框架&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（二）：代码框架&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（二）：代码框架&quot;&gt;&lt;/a&gt;Openstack学习与总结（二）：代码
      
    
    </summary>
    
      <category term="程序与算法" scheme="https://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="https://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(一)——框架介绍</title>
    <link href="https://www.newtonsz.com/2018/03/11/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E4%B8%80)%E2%80%94%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.newtonsz.com/2018/03/11/Openstack学习与总结(一)—框架介绍/</id>
    <published>2018-03-11T13:39:24.796Z</published>
    <updated>2018-03-12T08:31:14.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（一）：框架介绍"><a href="#Openstack学习与总结（一）：框架介绍" class="headerlink" title="Openstack学习与总结（一）：框架介绍"></a>Openstack学习与总结（一）：框架介绍</h1><blockquote><p>OpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface.(Official)</p></blockquote><p>OpenStack是一个云平台管理的项目，它是AWS的开源实现，代码语言采用Python，属于云计算IaaS层的技术，主要负责管理计算、存储以及网络等基础设施资源，附加安全、计量与监控以及控制面板等辅助功能。如下图为Openstack的概念图。<div align="center"><br><img src="https://www.openstack.org/software/images/diagram/overview-diagram.svg" alt="https://www.openstack.org/software/images/diagram/overview-diagram.svg"><br></div></p><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>Openstack系统的发展就是一个利用抽象原则，不断提取通用性的过程，其系统框架主要分为两条线：</p><ul><li>项目之间通过 <a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">REST fulAPI</a> 进行通信；</li><li>项目内部，不同服务进程之间采用基于  <a href="https://baike.baidu.com/item/AMQP" target="_blank" rel="noopener">AMQP模型</a> 的 <a href="https://www.ibm.com/developerworks/cn/cloud/library/1403_renmm_opestackrpc/" target="_blank" rel="noopener">RPC </a> 消息总线的形式进行通信。</li></ul><p>通过这两条线可保证各个项目之间对外提供服务的接口可以被不同类型的客户端支持，同时也保证了项目内部通信的可扩展性和可靠性，以支持大规模的部署。如下图为Openstack的Cinder组件通信示意图。<div align="center"><br><img src="https://www.ibm.com/developerworks/cn/cloud/library/1403_renmm_opestackrpc/image003.gif" alt=""><br></div></p><h2 id="项目组件"><a href="#项目组件" class="headerlink" title="项目组件"></a>项目组件</h2><p>Openstack是一个管理平台，包含众多的项目，具体项目如下：</p><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:center">功能</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">Nova</td><td style="text-align:center">计算组件，控制虚拟机的状态变迁，管理者他们的资源分配，即虚拟机的抽象</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/nova" target="_blank" rel="noopener">Nova</a></td></tr><tr><td style="text-align:center">Swift</td><td style="text-align:center">对象存储组件，比较适合存放静态数据</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/swift" target="_blank" rel="noopener">Swift</a></td></tr><tr><td style="text-align:center">Cinder</td><td style="text-align:center">块存储组件，比较适合存放动态数据</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/cinder" target="_blank" rel="noopener">Cinder</a></td></tr><tr><td style="text-align:center">Neutron</td><td style="text-align:center">网络组件，管理网络资源池，灵活划分和管理物联网络资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/neutron" target="_blank" rel="noopener">Neutron</a></td></tr><tr><td style="text-align:center">Keystone</td><td style="text-align:center">安全组件，服务总线，它为其他组件提供身份管理服务</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/keystone" target="_blank" rel="noopener">Keystone</a></td></tr><tr><td style="text-align:center">Celiometer</td><td style="text-align:center">计量与监控组件，监控与计量资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/ceilometer" target="_blank" rel="noopener">Celiometer</a></td></tr><tr><td style="text-align:center">Horizon</td><td style="text-align:center">控制面板组件，提供了一个模块化的基于Web的图形界面，用户可通过浏览器使用Horizon提供的控制面板来访问和控制计算、存储以及网络资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/horizon" target="_blank" rel="noopener">Horizon</a></td></tr><tr><td style="text-align:center">Glance</td><td style="text-align:center">镜像组件，为系统提供镜像服务</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/glance" target="_blank" rel="noopener">Glance</a></td></tr></tbody></table><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>如下图为Openstack创建云主机的工作流程^[7]^：<br><img src="http://images2015.cnblogs.com/blog/947529/201609/947529-20160913162520398-1054915693.png" alt="Openstack新建云主机流程图"></p><ol><li>界面或命令行通过RESTful API向keystone获取认证信息。</li><li>keystone通过用户请求认证信息，并生成auth-token返回给对应的认证请求。</li><li>界面或命令行通过RESTful API向nova-api发送一个boot instance的请求（携带auth-token）。</li><li>nova-api接受请求后向keystone发送认证请求，查看token是否为有效用户和token。</li><li>keystone验证token是否有效，如有效则返回有效的认证和对应的角色。</li><li>通过认证后nova-api和数据库通讯。</li><li>初始化新建虚拟机的数据库记录。</li><li>nova-api通过rpc.call向nova-scheduler请求是否有创建虚拟机的资源(Host ID)。</li><li>nova-scheduler进程侦听消息队列，获取nova-api的请求。</li><li>nova-scheduler通过查询nova数据库中计算资源的情况，并通过调度算法计算符合虚拟机创建需要的主机。</li><li>对于有符合虚拟机创建的主机，nova-scheduler更新数据库中虚拟机对应的物理主机信息。</li><li>nova-scheduler通过rpc.cast向nova-compute发送对应的创建虚拟机请求的消息。</li><li>nova-compute会从对应的消息队列中获取创建虚拟机请求的消息。</li><li>nova-compute通过rpc.call向nova-conductor请求获取虚拟机消息。（Flavor）</li><li>nova-conductor从消息队队列中拿到nova-compute请求消息。</li><li>nova-conductor根据消息查询虚拟机对应的信息。</li><li>nova-conductor从数据库中获得虚拟机对应信息。</li><li>nova-conductor把虚拟机信息通过消息的方式发送到消息队列中。</li><li>nova-compute从对应的消息队列中获取虚拟机信息消息。</li><li>nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求glance-api获取创建虚拟机所需要镜像。</li><li>glance-api向keystone认证token是否有效，并返回验证结果。</li><li>token验证通过，nova-compute获得虚拟机镜像信息(URL)。</li><li>nova-compute通过keystone的RESTfull API拿到认证k的token，并通过HTTP请求neutron-server获取创建虚拟机所需要的网络信息。</li><li>neutron-server向keystone认证token是否有效，并返回验证结果。</li><li>token验证通过，nova-compute获得虚拟机网络信息。</li><li>nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求cinder-api获取创建虚拟机所需要的持久化存储信息。</li><li>cinder-api向keystone认证token是否有效，并返回验证结果</li><li>token验证通过，nova-compute获得虚拟机持久化存储信息。</li><li>nova-compute根据instance的信息调用配置的虚拟化驱动来创建虚拟机。<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2></li></ol><blockquote><p>[1] Openstack源码：<a href="https://releases.openstack.org/queens/index.html" target="_blank" rel="noopener">Openstack</a><br>[2] Github源码：<a href="https://github.com/openstack/nova" target="_blank" rel="noopener">Openstack</a><br>[3] Openstack Manuals：<a href="https://docs.openstack.org/queens/" target="_blank" rel="noopener">Openstack</a><br>[4] Openstack wiki：<a href="https://wiki.openstack.org/wiki/Main_Page" target="_blank" rel="noopener">Openstack</a><br>[5] Openstack  Development：<a href="https://developer.openstack.org/" target="_blank" rel="noopener">Openstack</a><br>[6] 创建云主机流程 ：<a href="http://blog.csdn.net/zhongbeida_xue/article/details/54632996" target="_blank" rel="noopener">创建云主机</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（一）：框架介绍&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（一）：框架介绍&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（一）：框架介绍&quot;&gt;&lt;/a&gt;Openstack学习与总结（一）：框架
      
    
    </summary>
    
      <category term="程序与算法" scheme="https://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="https://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>资源与工具</title>
    <link href="https://www.newtonsz.com/2018/03/10/%E5%85%83%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.newtonsz.com/2018/03/10/元知识/</id>
    <published>2018-03-10T07:20:12.509Z</published>
    <updated>2018-03-11T13:48:48.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网资源与工具"><a href="#互联网资源与工具" class="headerlink" title="互联网资源与工具"></a>互联网资源与工具</h1><h2 id="元资源"><a href="#元资源" class="headerlink" title="元资源"></a>元资源</h2><p>所谓元资源就是资源的资源，即第一手资源，类似第一性原理。这里主要列出课程、演讲、论文以及书籍。</p><ul><li><strong>课程</strong></li></ul><ol><li><a href="https://www.coursera.org/" target="_blank" rel="noopener">coursera</a> 主要收录一些国外的经典课程。</li><li><a href="https://www.coursera.org/" target="_blank" rel="noopener">stanford</a> 斯坦福大学的一些公开课程。</li><li><a href="https://ocw.mit.edu/courses/" target="_blank" rel="noopener">MIT</a> 麻省理工学院的公开课程。</li><li><a href="https://www.lynda.com/" target="_blank" rel="noopener">lynda</a> 在线课程。</li><li><a href="https://open.163.com/" target="_blank" rel="noopener">网易公开课</a> 国内网易公开课。</li></ol><ul><li><strong>演讲</strong></li></ul><ol><li><a href="http://videolectures.net/" target="_blank" rel="noopener">videolectures</a> 足不出户听遍最新学术讲座。</li><li><a href="https://www.ted.com/" target="_blank" rel="noopener">TED</a> 关注其playlists。</li><li><a href="http://www.tedtochina.com/" target="_blank" rel="noopener">TEDtoChina</a> TED的中文翻译，如果英语不够好。</li></ol><ul><li><strong>论文</strong></li></ul><ol><li><a href="http://paulgraham.com/" target="_blank" rel="noopener">paulgraham</a> 保罗·格雷厄姆，美国著名程序员、风险投资家、博客和技术作家。他以Lisp方面的工作而知名，也是最早的Web应用Viaweb的创办者之一。</li><li><a href="http://www.mlsurveys.com/" target="_blank" rel="noopener">Machine Learning Surveys</a> 机器学习的有关论文。</li><li><a href="http://gen.lib.rus.ec/" target="_blank" rel="noopener">Library Genesis</a> 文献检索。</li><li><a href="https://normaldeviate.wordpress.com/2012/12/21/guest-post-rob-tibshirani/" target="_blank" rel="noopener">Normal Deviate</a> 机器学习最有影响的论文。</li><li><a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">semanticscholar</a> 文献检索。</li><li><a href="https://www.plos.org/" target="_blank" rel="noopener">plos</a> 最新的研究论文成果检索。</li><li><a href="http://www.cnki.net/" target="_blank" rel="noopener">中国知网</a> 国内的学术论文库。</li></ol><ul><li><strong>书籍</strong></li></ul><ol><li><a href="https://openstax.org/subjects" target="_blank" rel="noopener">openstax</a> 莱斯大学的一所免费教科书出版商。</li><li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩</a> 电子书搜索引擎。</li><li><a href="http://forfrigg.com/#gsc.tab=0" target="_blank" rel="noopener">Kiddle电子书</a> Kiddle电子书资源。</li><li><a href="https://iask.sina.com.cn/" target="_blank" rel="noopener">新浪共享电子书</a> 新浪共享电子书。</li><li><a href="https://global.oup.com/academic/content/series/v/very-short-introductions-vsi/?cc=cn&amp;lang=en&amp;" target="_blank" rel="noopener">牛津通识读本</a> 各个学科的了解。</li></ol><h2 id="优秀博客"><a href="#优秀博客" class="headerlink" title="优秀博客"></a>优秀博客</h2><p>优秀的博主都有一个共同的特点，即拥有庞大的阅读量，并坚持长期写作的习惯，不同的只是写作风格。</p><ol><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a> 国内科技博客第一人。</li><li><a href="http://www.yangzhiping.com/" target="_blank" rel="noopener">阳志平</a> 安人心智科学总监，从事认知科技产品研发与项目孵化。</li><li><a href="https://coolshell.cn/" target="_blank" rel="noopener">陈皓</a> 个人技术博客，现在创业。</li><li><a href="https://blog.youxu.info/" target="_blank" rel="noopener">徐宥 </a> 华盛顿大学人工智能博士，南京大学数学学士，现在创业。</li><li><a href="http://blog.farmostwood.net/sitemap" target="_blank" rel="noopener">木遥</a> 软件工程与数学，博士。</li><li><a href="http://www.changhai.org/" target="_blank" rel="noopener">卢昌海</a> 物理学博士。</li><li><a href="http://www.maguang.net/" target="_blank" rel="noopener">马光</a> 历史与社会关系，在校教师。</li><li><a href="http://anzhu.net/" target="_blank" rel="noopener">安猪</a> 美学研究，写作与读书。</li><li><a href="http://www.pzhao.org/zh/" target="_blank" rel="noopener">赵鹏</a> 草根到精英，农村到城市，中国河南人，目前在因斯布鲁克大学生态学院从事博士后研究工作，专业是大气研究。</li><li><a href="http://mednoter.com/" target="_blank" rel="noopener">吕小荣</a> Ruby开发者，做过医生和产品经理。</li><li><a href="http://www.yue366.com/" target="_blank" rel="noopener">肖月</a> 学术界研究者，铁路博士。</li><li><a href="https://www.music4x.com/" target="_blank" rel="noopener">老罗的博客</a> 生活百科。</li><li><a href="http://cn.derekyang.us/" target="_blank" rel="noopener">戴睿可</a> 传媒人，现居美国。</li><li><a href="https://zenhabits.net/" target="_blank" rel="noopener">zenhabit</a> 将禅学应用到生活中，英文博客。</li><li><a href="http://www.raychase.net/allarticles" target="_blank" rel="noopener">四火的唠叨</a>  程序猿，他一个伟大的愿望。我希望凭借自己的努力，净化程序员的环境，提升程序员的地位。愿IT界再无黑心企业的剥削，无人自嘲“码农”、“码畜”，技术人员受到足够尊重，写程序重新成为一种创造性的劳动。软件行业，重新成为令人羡慕的行业。自由、开放、创新、包容。</li><li><a href="https://justyy.com/" target="_blank" rel="noopener">小懒人的英国生活和资讯</a> 英国生活。</li><li><a href="https://chenghouwen.com/about" target="_blank" rel="noopener">程厚文</a> 传统朴素写作风格，伊凡克里玛说：写作，是一个人能够成为一个人最重要的途径之一。我经营和管理的这个个人网站，严格意义上来讲还算不得是系统性的写作，但是也多少可以让人有点与众不同的感觉。另外，生活的本身是无趣的，我想尽量榨取点有趣出来，我坚持以有趣打败时间。</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>工欲善其事必先利其器，好的利器，配上专业的术，并将道贯穿其中，将所向披靡，无往不胜。</p><ol><li><a href="https://stackexchange.com/sites" target="_blank" rel="noopener">stackexchange</a> 你要问的都在上面。</li><li><a href="https://leetcode.com/" target="_blank" rel="noopener">leecode</a> 训练算法思维和编程技巧。</li><li><a href="https://github.com/" target="_blank" rel="noopener">github</a> 最聪明的程序猿都在上面，开源第一。</li><li><a href="https://hinative.com/zh-CN" target="_blank" rel="noopener">hinative</a> 学习语言。</li><li><a href="https://www.englishpage.com/verbpage/verbs1.htm" target="_blank" rel="noopener">口语写作练习</a> 在线语言练习。</li><li><a href="https://fontawesome.com/icons" target="_blank" rel="noopener">图标制作</a> icons制作。</li><li><a href="https://weibomiaopai.com/?ref=tumutanzi" target="_blank" rel="noopener">各大视频软件视频下载</a> </li><li><a href="typora">Typora</a> markdown编辑与阅读工具。</li><li><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a> 设计作品。</li><li><a href="https://www.edge.org/" target="_blank" rel="noopener">Edge</a> 科普网站。</li><li><a href="https://m.imdb.com/?ref_=m_nv_home" target="_blank" rel="noopener">IMDB</a> 电影评分。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网资源与工具&quot;&gt;&lt;a href=&quot;#互联网资源与工具&quot; class=&quot;headerlink&quot; title=&quot;互联网资源与工具&quot;&gt;&lt;/a&gt;互联网资源与工具&lt;/h1&gt;&lt;h2 id=&quot;元资源&quot;&gt;&lt;a href=&quot;#元资源&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="资源与工具" scheme="https://www.newtonsz.com/categories/%E8%B5%84%E6%BA%90%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="元知识" scheme="https://www.newtonsz.com/tags/%E5%85%83%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>云计算概述</title>
    <link href="https://www.newtonsz.com/2018/03/05/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.newtonsz.com/2018/03/05/云计算概述/</id>
    <published>2018-03-05T07:54:22.315Z</published>
    <updated>2018-03-11T13:48:48.811Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！</p><p>&ensp;&ensp;&emsp;如果翻翻计算机技术的发展历史，几乎任何看似新的技术都有与之相对应的概念，只是当时的条件限制了其发展。随着计算能力的增强、存储空间的扩大以及网络带宽的提升，云计算的出现也就水到渠成了。</p><p>&ensp;&ensp;&emsp;云计算一般被定义在网络环境下计算资源的交付和使用方式，用户通过网络按需、易扩展的方式获得所需服务。换言之，即将处于整个互联网的空闲计算资源调度并集中起来，服务于某一台终端计算机，实现终端的处理能力提升。其本质就是服务的交付，也是能力的交付，其基本思想是资源的打散重组、灵活调度。云计算一般的支撑条件包括：1）足够的带宽网络；2）资源“池化”，按需伸缩的弹性机制；3）服务自治；4）后台自适应这种变化；5）按使用量计算成本。</p><p>&ensp;&ensp;&emsp;抽象思维是计算机领域的重要思想，底层被抽象成接口服务提供给上层调用，进而屏蔽掉底层的实现细节，一切资源都可以封装成服务。云计算服务交付模式可分为IaaS基础设施即服务、PaaS平台即服务以及SaaS软件即服务。IaaS是云服务的最底层，主要提供一些诸如计算、存储以及网络的基础设施；PaaS是云服务的中间层，主要提供软件部署平台及运行环境，抽象掉了硬件和操作系统的细节，可以无缝地扩展，用户只需关注自身的业务逻辑，无需关注底层；SaaS是云服务的最上层，它是软件的开发、管理以及部署都交给第三方，不需要关注技术问题，拿来即用。云计算的部署方式包括公有云、私有云、混合云以及社区云等。总而言之，云计算就是将计算资源、存储资源、网络资源以及安全服务抽象成可交付的服务。<img src="http://img.yixieshi.com/wp-content/uploads/2018/02/1519615359-3380-2502701-35610405054031c4.jpg?imageslim|imageView2/2/w/1000/h/563/interlace/1/q/70" alt=""></p><p>&ensp;&ensp;&emsp;云计算的实现紧紧地依托于虚拟化和分布式计算两项关键技术，虚拟化解决物理资源与用户使用解耦的问题，分布式计算解除用户和大型应用系统之间的绑定关系，两者的本质都是将资源和利用进行解耦，从而提升资源利用的自由度。云计算基础设施方面——云计算数据中心设计与管理及资源虚拟化技术；大规模数据处理方面——海量数据处理平台即其资源管理与调度技术；云计算服务保障方面——服务质量保障和安全与隐私保护技术。<br><img src="http://img.yixieshi.com/wp-content/uploads/2018/02/1519615362-3305-2502701-5903e6fd91929981.jpg?imageslim|imageView2/2/w/1000/h/563/interlace/1/q/70" alt=""><br>&ensp;&ensp;&emsp;云计算是一个比较庞大的生态系统，包括上游的云服务用户、中游的I-P-S各层云服务平台提供商以及下游的设备及网络提供商，不同行业均在建设属于自己的行业解决方案，即行业云，颠覆传统IT基础设施；整个生态技术类的岗位包括基础架构设计、应用开发、平台开发、平台运维以及安全类的服务保障等：<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（1）基础架构设计：涉及自动扩展、负载均衡、虚拟化以及容器类的计算服务，涉及DNS/CDN的网络服务，以及网络存储、对象存储、块存储以及灾备恢复的存储服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（2）应用开发：涉及Web应用、桌面虚拟化、移动应用以及IoT的前端应用，高性能计算和渲染的后端应用，以及类似CRM、ERP和生物科学的行业应用。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（3）平台开发：涉及操作系统、数据管理（SQL、缓存、检索、大数据以及机器学习）、身份认证以及包括日志和监控的管理服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（4）平台运维：涉及包含持续交付和持续集成的DevOps、配置以及部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;如果翻翻计算机技术的发展历史，几乎任何看似新
      
    
    </summary>
    
      <category term="程序与算法" scheme="https://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="https://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>浅谈科技论文之写作方法</title>
    <link href="https://www.newtonsz.com/2018/03/03/%E6%B5%85%E8%B0%88%E7%A7%91%E6%8A%80%E8%AE%BA%E6%96%87%E4%B9%8B%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>https://www.newtonsz.com/2018/03/03/浅谈科技论文之写作方法/</id>
    <published>2018-03-03T10:47:35.059Z</published>
    <updated>2018-03-10T05:59:45.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「世事洞明皆学问-人情练达即文章」"><a href="#「世事洞明皆学问-人情练达即文章」" class="headerlink" title="「世事洞明皆学问 人情练达即文章」"></a><center>「世事洞明皆学问 人情练达即文章」</center></h1><p>&ensp;&ensp;&emsp;在深大念硕士研究生的三载时光，大大小小的写作训练不在少数，其中包括期刊论文，专利论文，企业项目申请书以及硕士毕业论文等，姑且不谈论文内容质量之高低，但写作的方法以及行文的套路尚且值得一说。</p><p>&ensp;&ensp;&emsp;科技论文的写作目的在于给予专业人士以启发，提供工程实践以价值。此番目的就奠定了科技论文的写作基调：内容之客观真实、形式之清晰可读。客观真实表明论文所研究的内容和结论须可重现，不存在捏造数据的不端现象；清晰可读说明论文须具备逻辑严谨、结构清晰的特点，行文风格上须显专业，其不同于科普文章，科技论文的读者是该领域的专业人士，遣词琢句尽量使用行业专业术语，此类文章并非老少皆宜。</p><p>&ensp;&ensp;&emsp;在论文的内容上，高低优劣就得看个人造诣了，正所谓“冰冻三尺非一日之寒”，个人平时的积累和总结是必不可少的，任何的创新以及好的想法都并非无水之源、无木之本，永远都是台前幕后的故事。说到创新，记得上课之时老师有谈及过，说做研究就好比爬山，无外乎两条路：一是沿着一条路不断深入，直到爬到山顶；一是多走几条路，拼拼凑凑或许也能爬到山顶。大概意思是说为了取得某种结果或现象，要么沿着一种策略不断深入研究，要么多借助几种现有的策略，将其排列组合形成一种新的策略。在写作内容上，我才疏学浅，并无成就，故不敢胡言。</p><p>&ensp;&ensp;&emsp;在论文形式的安排上，要做到文章逻辑清晰可读是有迹可循的，属于工程实践的范畴。站在读者的角度、沿着论文的主题去行文是论文结构安排的首要原则，有了这个基本原则，文章的逻辑就可以按照“总-分-总”的结构来填充，即先整体搭好框架，然后斟酌细节，最后排查全文。一般科技论文由目录、摘要、正文、总结以及参考文献所构成，其中正文一般由研究的意义和背景、国内外研究现状、相关理论叙述以及核心算法论证等部分组成，核心算法论证部分又可分为模型建立、算法论证以及实验分析等。文章的骨架是其目录结构，其主题是摘要，所以，目录结构和摘要的书写就成了全文的奠基工程。</p><p>&ensp;&ensp;&emsp;（一）摘要。摘要是全文的高度提炼与总结，其组织安排可按照如何回答如下的几个问题的形式而展开：该研究是在怎样的行业背景下进行的？它需要解决什么样的问题或难题？针对该问题提出了怎样的解决措施？该措施运用了什么样的方法和策略？经验证该措施得到的结果或量化指标怎么样？还存在哪些不足与值得改进的地方？这样层层逼近，环环相扣，摘要的整体脉络也就托盘而出了，后续对其语句进行精炼调整即可。</p><p>&ensp;&ensp;&emsp;（二）正文与总结。正文是摘要的详细描述，首先是研究的意义和背景，说明该研究的来源、社会背景以及研究的意义所在，此处的行文基调应做到与时俱进，利国利民；然后是国内外研究现状，指出国内外研究者针对该课题最新的研究进展，采用总结与评判的方式来概要论述，既要看到其闪光点，也要发现其不足之处；紧接着是课题研究所涉及的相关理论进行说明，此处秉着“站着巨人的肩膀上”的态度即可，只提结论，不问缘由，公式化理论行文风格；然后是核心算法论证部分，从问题的提出到模型的构建，从算法的推导到论证分析，从仿真分析到具体验证，该部分是论文的核心与精华所在，此处应是图文并茂、逻辑流畅以及拥有数学之美的行文风格，一切以数据说话；最后是总结与展望，总结全文的研究内容，展望课题的不足并结合相关理论给出改进的方向，无需涉及细节，其行文基调应是不卑不亢、积极上进以及谦虚并抱有敬畏之心。</p><p>&ensp;&ensp;&emsp;以上论述仅从自身写作经验所抽离出来的拙见，仅作总结回顾之用，如有不足与错误之处，日后定当努力端正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「世事洞明皆学问-人情练达即文章」&quot;&gt;&lt;a href=&quot;#「世事洞明皆学问-人情练达即文章」&quot; class=&quot;headerlink&quot; title=&quot;「世事洞明皆学问 人情练达即文章」&quot;&gt;&lt;/a&gt;&lt;center&gt;「世事洞明皆学问 人情练达即文章」&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="阅读与思考" scheme="https://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="https://www.newtonsz.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>计算机知识体系</title>
    <link href="https://www.newtonsz.com/2018/02/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>https://www.newtonsz.com/2018/02/24/计算机知识体系/</id>
    <published>2018-02-24T14:49:31.726Z</published>
    <updated>2018-03-10T07:17:40.775Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；再次需要进行触类旁通，灵活运用以往的知识来理解、分析该项技术，理解其本质；最后进行比较权衡，用最高效的手段去解决它。</p><p>&ensp;&ensp;&emsp;计算机知识可分为三大类别：基础知识、领域知识以及工具化知识。基础知识即程序猿必须要掌握的通识性质的内容；领域知识即程序猿从事的技术方向的知识；工具化知识即程序猿职业生涯中实践所得的一些提高工作效率的碎片化知识。<br>&ensp;&ensp;&emsp;一、基础知识主要是数学+计算机五大件。程序猿工作中大量的内容都是业务相关的，所涉及的数学知识较少，但如果想要得以发展，精研某一方面则需要扎实的数学功底，否则这份工作就有天花板，也就容易被人替换。程序猿用到的数学，总结起来，主要是微积分、线性代数以及概率论三门课程。计算机五大件包括计算机组成原理、数据结构、操作系统、计算机网络以及编译原理，这五大件是从事IT领域所必备的基础知识。此外，掌握若干种编程语言，包括静态/动态、面向过程/面向对象、编译型/解释型。最后是软件工程的内容，如何写出艺术般的代码。<br>&ensp;&ensp;&emsp;二、领域知识。不同的方向需要掌握不同的领域知识。首先需要对该领域在业界的发展情况以及技术全景有所了解，然后是找到该领域存在的问题，最后通过自身的努力去解决问题。最终，使得自己的“T”型知识体系的纵向不断延伸。<br>&ensp;&ensp;&emsp;三、工具化知识。工具化知识即提升工作效率的工具或习惯，这个需要平时的积累和总结。</p><p>&ensp;&ensp;&emsp;如果套用“T”型知识管理体系，可以将基础知识看作是构成“T”型的原材料，领域知识看作是纵向的深度，而工具化知识看作横向的广度。原材料是基础，纵向的深度是支撑，横向的广度可以起到如虎添翼的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；
      
    
    </summary>
    
      <category term="程序与算法" scheme="https://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="技术" scheme="https://www.newtonsz.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="https://www.newtonsz.com/2018/02/05/%E9%98%85%E8%AF%BB/"/>
    <id>https://www.newtonsz.com/2018/02/05/阅读/</id>
    <published>2018-02-05T11:24:09.227Z</published>
    <updated>2018-03-11T13:48:48.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="images/白鹿.jpg" alt="白鹿"></p><h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a><center>一、绪论</center></h1><p>&ensp;&ensp;&emsp; 年前，在写论文的闲暇之时，翻了几本书，深感纸上得来终觉浅，于是就现学现卖，也算是活学活用吧。用《如何阅读一本书》中的方法论去解读《人生的智慧》和《穷查理宝典》，用《人生的智慧》中的观点来审视《穷查理宝典》，用《穷查理宝典》中多元思考模型和逆向思维来梳理《人生的智慧》和《如何阅读一本书》的行文脉络，最终得出的结论是《人生的智慧》是一本值得反复阅读的书籍。</p><p>&ensp;&ensp;&emsp;一般来说，获得知识经验有两种方式：一方面是通过个人的实践来直接获得感性认识，并通过理性地思考和总结而获得；另一方面是通过阅读和交流来间接获得前人的经验，加上自己的筛选和总结，进而内化。前者要想做到并非易事，事事追求亲力亲为的做法成本过高；而相对来说，后者便是一种可行并无门槛的做法，通过阅读前人毕其一生所完成的积累，跨越时空的限制，获得间接经验和智慧。人是非常渺小的生物，在世不过百年，每个人都不得不遵循这个恒定的时间限制，但，阅读也许是超越这个限制的方法。</p><h1 id="二、《人生的智慧》"><a href="#二、《人生的智慧》" class="headerlink" title="二、《人生的智慧》"></a><center>二、《人生的智慧》</center></h1><p>&ensp;&ensp;&emsp;关于人生的话题，德国哲学家叔本华在《人生的智慧》中谈到了本质。总体来说，人生的智慧，即如何才能幸福快乐地度过短暂的一生的话题，但叔本华的本意其实是在谈如何有效地避免生活中的痛苦的话题，因为幸福是否定的，痛苦才是人生的本质，与其苦苦追求所谓的幸福，不如学会如何有效地避免伤痛与疾苦。</p><p>&ensp;&ensp;&emsp;作者首先将人作了基本的划分，作为社会的人具体由诸如健康、性情以及智力组成的人的自身，这是第一性的；然后是人所拥有的财产，这里指钱财的相对数量；最后是人所展现的表象，包括名誉、地位和名声，这些仅仅是为了获得利益和保护自己而采取的具体手段，不是目的。</p><p>&ensp;&ensp;&emsp;然后，谈到个人如何面对自己、他人以及命运世事发展的话题。首先是如何与自己相处，一个充足完备的人应当是一个独立的统一体，而不是人的一个统一体的一部分，所能拥有的就在其自身，归根到底所能寄希的也只有自己，所以孤独是正常的，并且是需要学会的。“把社会人群比喻为一堆火，明智的人在取暖的时候懂得与火保持一段距离，而不会像傻瓜那样太过靠近火堆；后者在灼伤自己以后，就一头扎进寒冷的孤独之中，大声地抱怨那灼人的火苗”。作为第一性的划分，需要清楚了解自己的首要和真正的意愿，选择合适的职业和角色，并且活在当下，从而来增强个人第一性的划分。接着是个人如何面对他人，“心中只有自己，眼中却只有他人”是个明智的做法，因为每个人都脱离不了主体的“我”，每个人只能根据自己的思想智力去明白和理解他人，并且人都有其双面性；保持礼貌和沉默是避免伤害和保护自己的好办法；有时候推己及人、换位思考的办法可以更好地理解他人的行为。最后是个人如何面对命运和世事的发展，明白变化是事物发展的本质，应牢记时间的作用和事物昙花一现的本质。“一个明智之人其实就是一个不会被事物的恒久不变的表面所欺骗的人”。谈到了运气的利害性，明智、力量和运气，其中运气至关重要。“人生好比乘舟，个人的努力奋斗和挣扎就像桨橹，而运气之重要好比风向”，再请多一点勇气。</p><p>&ensp;&ensp;&emsp;最后是阐述了人生的各个阶段，人生大多时候像是在痛苦和无聊之间作来回摆动的运动，痛苦和无聊是双重对立的关系，其分为内在和外在的，痛苦来自生活的艰辛匮乏，而无聊来源于丰裕安定，这是外在的；丰富内在的人大多是痛苦的，精神迟钝的人大多是无聊的，这是内在的。在无聊和痛苦之间寻求平衡点，而这个平衡点就是闲暇。谈到人生的各个阶段，“一个人如果没有他那种年龄的神韵，那他也就会有他那种年龄特定的种种不幸”。人生的前半生是对幸福的苦苦追求，人的后半生是对遭遇不幸的害怕和担忧。童年时期，一切都是新奇的，一以类千，习惯用永恒的一面看待人和事，是一种从远处看舞台布景的诗意视角；到了青年时代，个人会受意欲的控制，苦苦追求所谓的幸福而不得，由此产生不满的情绪；中年时期，思想趋于成熟，开始逐渐摆脱偏见，以一种朴素和客观的视角去看待人和事，克服童年时期的直观和青年时期的意欲；而到了老年时期，人的需求逐渐变少，思维活动较丰富，以一种从近处审视舞台布景的客观视角，摆脱了幻想、假象和偏见。叔本华建议个人在年轻精力旺盛时，通过阅读和经历丰富自己的大脑，同时注意积累相对数量的财富，同时生活上的节制更有助于加强生命力，如果能有幸免于疾病的困扰，老年生活将是无比安宁和满足。</p><p>&ensp;&ensp;&emsp;总体来说，我对书中的观点是比较认可的，并且经得起实践的检验，大多数的个人活动都符合书中所谈。最让我惊讶的是关于人的两大痛苦的本质概括，如此的精确和契合。于我而言，这本书让我豁然开朗，一方面让我更加了解并理解自身的心理活动，如此便会懂得如何和自己和谐相处；另一方面，对人的心理诉求有了些许的认识，使得自己能够以更加安全的方式与他人相处，坚定地以一种朴素客观的视角去看待人和事，还原实物发展的本质；同时，面对命运和世事的发展，本着一种“但行好事，不问前程”的态度。</p><h1 id="三、《如何阅读一本书》"><a href="#三、《如何阅读一本书》" class="headerlink" title="三、《如何阅读一本书》"></a><center>三、《如何阅读一本书》</center></h1><p>&ensp;&ensp;&emsp;写到这里，关于叔本华的《人生的智慧》一书的主要内容大致说清楚了。其实，关于行文的脉络，完全参考《如何阅读一本书》的意思展开的，成甲说，“一切的学习和努力无非三个目标：一是解释问题，二是解决问题，三是预测问题。”，如何阅读一本书，首先应明确阅读的目标是什么？是为了获得资讯还是为了求得增加理解力而读；然后需判断所读之书是何种类型，是实用性还是理论性的。以上两点是在深入阅读之前就需要明确的；至于怎么读的问题，具体可以分为四个层次：①以理解语言、解文识字为目的的基础阅读；②在规定时间内的略读，即检视阅读；③系统全盘化的分析阅读；④通过发散、关联和比较的主题阅读。作者花了大量篇幅解读了分析阅读的细节，也推荐读者追求此层次的阅读。关于阅读之后的处理，需要谨慎地回答四个问题：1）整体来说，这本书到底在谈论什么？2）作者在细节上说了什么，怎么说的？3）这本书说的有道理吗，全部还是部分？4）这本书与我有什么关系？</p><h1 id="四、《穷查理宝典》"><a href="#四、《穷查理宝典》" class="headerlink" title="四、《穷查理宝典》"></a><center>四、《穷查理宝典》</center></h1><p>&ensp;&ensp;&emsp;关于叔本华《人生的智慧》一书，核心思想是个人如何幸福愉快地度过一生的艺术，而作者却是在从反面来阐述个人如何有效地避免痛苦，这点正是查理·芒格极力推崇的逆向思维，一个问题如果正向比较棘手，反向的视角可能就豁然开朗，迎刃而解。《穷查理宝典》是有关方法论的应用书籍，读这本的目的就是想增强自己的理解力，顺带实践下《如何阅读一本书》中的读书方法论。该书是根据查理·芒格的言谈、演讲以及在商业领域的一些实践所整理的，类似于中国古代《论语》的行文风格，其核心思想是书中反复强调的多元思维模型，这是一种以生态系统的视角来看待问题的方法，将多种思维模型结合，从而进行多方位、多维度的分析，并由此来提高成功解决问题的概率，所以说，建立多元的思考模型，就是为了降低诸如锤子思维（一个手里拿着铁锤的人，他们往往会认为世界就是一颗钉子）这种单一维度的思考而引发错误决策产生的概率。</p><p>&ensp;&ensp;&emsp;在芒格看来，世间宇宙万物都是一个相互作用的整体，只有把不同学科的知识结合起来，并贯穿在一个思想框架中，才能对正确的认知和决策起到帮助作用。<br>&ensp;&ensp;&emsp;一是，要突破学科的界限。“我是真的呼吁你们不要理会学科的法定界限。这个世界并不是按照跨学科的方法组织起来的，这个世界要求我们跳出学科的法定范围。”芒格说。<br>&ensp;&ensp;&emsp;二是，要能融会贯通使用。“大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。你知道谚语是怎么说的：在手里拿着铁锤的人看来，世界就像一颗钉子。这是处理问题的一种笨办法。”芒格说。<br>&ensp;&ensp;&emsp;突破学科界限，将不同学科的知识融会贯通使用，就可以在此基础上形成“普世智慧”。比如诸如各个学科的思想模型——数学（复利，排列组合，高斯分布，幂律效应）、物理（断裂点理论，临界质量）、工程学（后备系统）、计算机信息科学（规模优势理论，信息优势理论）、心理学（误判心理学）、生物/生理学（自然选择，适者生存）、微观经济学（边界效应递减）等等。</p><p>&ensp;&ensp;&emsp;在分析问题的时候，利用双轨思维，首先，理性地看，哪些因素真正控制了涉及的利益？其次，当大脑处于潜意识状态时，会自动形成哪些潜意识因素——这些潜意识因素总的来讲有用但（在具体情况下）却又常常失灵？</p><p>&ensp;&ensp;&emsp;以上仅仅阐述了书中关于多元思维模型的细节，回答了书中关于多元思维模型的种种细节问题；整本书读下来，真正能让我内化并吸收的可能就是对逆向思维和多元思维模型的阐述，因为一件事发生了，并没有规定它会落在哪个学科上，不同的人有不同的解读，也就无需理会学科之间的法定界限；至于与我有何关系，我想更多是开阔思维吧，也打破了我对陌生领域知识的畏惧心理，多去接触不同行业的人群，阅读不同领域的读物，以便利用多元思维模型去更好的理解事物发展的本质，最终避免生活中不幸与痛苦。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a><center>五、总结</center></h1><p>&ensp;&ensp;&emsp;都说做事情要讲究策略，坚持就是最好的策略（小土刀）。希望自己以此为起点，持之以恒地阅读、思考与写作，并能够持续地输出。最后借古人之智慧，作鲲鹏之势——“士人有百折不回之真心，才有万变不穷之妙用。立业建功，事事要从实地着脚，若少幕声闻，便成伪果；讲道修德，念念要从虚处立基，若少计功效，便落尘情。”                                                                      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;images/白鹿.jpg&quot; alt=&quot;白鹿&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、绪论&quot;&gt;&lt;a href=&quot;#一、绪论&quot; class=&quot;headerlink&quot; title=&quot;一、绪论&quot;&gt;&lt;/a&gt;&lt;center&gt;一、绪论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&amp;en
      
    
    </summary>
    
      <category term="阅读与思考" scheme="https://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="阅读" scheme="https://www.newtonsz.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
