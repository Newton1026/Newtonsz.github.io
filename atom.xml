<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Newton&#39;s</title>
  
  <subtitle>太阳黑子 | 力量、明智和运气</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-08T14:23:15.118Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Newton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/03/08/%E5%8D%A1%E7%89%87%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/03/08/卡片知识/</id>
    <published>2018-03-08T11:04:27.875Z</published>
    <updated>2018-03-08T14:23:15.118Z</updated>
    
    <content type="html"><![CDATA[<p>如何构建一套好的知识创造系统呢？按照野中郁次郎的研究，生成新知识，暗默知识与形式知识的相互转换有四种模式：从暗默知识到暗默知识的「共同化」过程；从暗默知识到形式知识的「表出化」过程；从形式知识到暗默知识的「内在化」过程；从形式知识到形式知识的「联结化」过程。</p><p>那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。——王小波《黄金时代》</p><p>如西蒙之于认知科学、马奇之于管理学、芒格之于投资、卡尼曼之于经济学，德鲁克之于管理学；诺曼之于设计、坎贝尔之于神话、莱考夫之于隐喻；费曼之于物理学，安德森之于网络学科；阿西莫夫之于科幻，艾科之于文学；弗洛伊德之于心理学；王阳明之于阳明心学；亚历山大之于建筑模式；佐藤信夫之于修辞；纳博科夫之于小说；阿奇舒勒之于创新算法；野中郁次郎之于知识创新；伯恩之于沟通分析；达尔文之于天择演化；伯特之于结构洞；格兰诺维特之于弱关系；钱穆之于史学；宇文所安之于中国诗学……</p><p>建议网指的是这个高管，企业内有多少人愿意寻求他的建议；友谊网是指多少人把他看做朋友，愿意邀请他参加生日晚会；信任网是企业内部多少人信任他；外界网则是在产业上下游，多少信息节点离不开他。</p><p>我对自己的要求很低：我活在世上，无非想要明白些道理，遇见些有趣的事。倘能如我所愿，我的一生的就算成功。为此也要去论是非，否则道理不给你明白，有趣的事也不让你遇到。</p><p>「夫物芸芸，各归其根。归根曰静，静曰复命。复命曰常，知常曰明，不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。」</p><p>人有四大福相：端庄厚重是贵相，谦卑含容是贵相。事有归着是富相，心存济物是富相。人有两大凶德：傲慢和多言。</p><p>卡片、文件和项目正反上下古今中外</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何构建一套好的知识创造系统呢？按照野中郁次郎的研究，生成新知识，暗默知识与形式知识的相互转换有四种模式：从暗默知识到暗默知识的「共同化」过程；从暗默知识到形式知识的「表出化」过程；从形式知识到暗默知识的「内在化」过程；从形式知识到形式知识的「联结化」过程。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结（一）</title>
    <link href="http://yoursite.com/2018/03/08/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/08/Openstack学习与总结（一）/</id>
    <published>2018-03-08T06:27:29.660Z</published>
    <updated>2018-03-08T06:28:47.090Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>目标优化</title>
    <link href="http://yoursite.com/2018/03/08/%E7%9B%AE%E6%A0%87%E4%BC%98%E5%8C%96%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/08/目标优化（转载）/</id>
    <published>2018-03-08T03:09:03.379Z</published>
    <updated>2018-03-08T06:25:51.250Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;『纵横江湖三十余载，杀尽仇寇，败尽英雄，天下更无抗手，无可柰何，惟隐居深谷，以雕为友。呜呼，生平求一败而不可得，诚寂寥难堪也。』<br>&ensp;&ensp;&emsp;凌厉刚猛，无坚不摧，弱冠前以之与河朔群雄争锋。紫薇软剑，三十岁前所用，误伤义士不祥，悔恨无已，乃弃之深谷。 重剑无锋，大巧不工。四十岁前恃之横行天下。 四十岁后，不滞于物，草木竹石均可为剑。自此精修，渐进于无剑胜有剑之境。</p><p>&ensp;&ensp;&emsp;在计算机视觉和机器学习中，把问题建模转换成目标函数，然后优化以求得模型参数是一个极其重要的方法。在这个过程中，误差往往出在两个地方，一个是从数据（或者现实世界）到建模的误差，另一个是从建模到解模的误差。目标函数太复杂则解模解不好，目标函数太简单则会让模型偏离实际太远。因此找一个富有表达能力，能较好处理各种实际问题，同时又有全局最优解（或者至少解有好性质）的目标函数，是我们一直以来要追求的。</p><p>&ensp;&ensp;&emsp;但是要达到这个目标是很难的事情。有全局最优解又足够灵活的目标函数屈指可数。在连续域上的一大类是凸函数，这个包括了凸集上的二次函数和线性函数，用梯度下降就能得到最优解，大家耳熟能详；另一类在离散域上有特殊结构的函数，比如说一些二元函数的和，有submodularity性质的函数，可以用动态规划、贪心法或者最大流最小割求解。但是碰到个一般的目标函数，既非凸又非线性的，那基本上就没戏了。一个著名的例外是SVD，可以得到非凸函数的全局最优解，原因是这个非凸函数（超球或者超椭球上的二次函数）比较简单，所有的驻点（特征值）都能求出来，然后比大小就行，最近一个例子是09年隐马尔可夫链的最优参数估计，先是得到分布的矩估计，再用SVD分解从而得到全局最优解，在理论上把那些期望最大值的迭代算法全都比下去了（当然实际效果怎样另当别论）。</p><p>&ensp;&ensp;&emsp;还有一类得到全局最优解的方法是穷举搜索法，最差情况下有指数复杂度但是能保证最优解。穷举法听起来很笨，但在很多情况下卓有成效。如果函数是低维且比较平缓，那不管它的形式有多复杂，画格子穷举就行，肯定最优。到了高维，因为维数灾难的问题，这个办法行不通了。这时，一个很有名的是分支界定法（branch-and-bound），通过设计一个启发式函数来砍去那些不用搜索的大块区域。两三年前这样的文章非常多，动不动就在摘要里说自己能得到全局最优解，其实是用的这个方法。另一种比较有趣的办法是约束生成法(constraint generation)，通过加很多变量，把一个困难问题建模成有指数个约束条件的线性规划，这样问题的形式变成凸的，可解，收敛了就是最优解。但因为有指数个约束条件，所以不知道什么时候能收敛。关于这个，有名的工作是结构模型的区分式参数估计，还有图模型松弛化，等等。具体的办法还有很多，在此打住，以后可以专门写一篇博客总结一下。</p><p>&ensp;&ensp;&emsp;总的来说，漂亮的函数形式太少，所以大家为了得到靠谱的解，都在往这几种形式上凑，但是数学上漂亮的目标函数究竟是不是贴合问题呢？不好说，比如用graphcut解图像分割，整体上挺不错，但分割的细节总是做不出来，只能围绕目标函数打各种补丁，更有局部解比全局解在视觉观感上更像对的情况。在这里，数学的美，反而限制了我们的手脚，因为数据不是美的。</p><p>&ensp;&ensp;&emsp;另一个极端是类似现在深度学习这样的实验科学做法，函数形式完全无所谓，是不是最优解也无所谓，一个梯度下降打倒一切，只要性能好，逻辑上能大致解释得通就行。这样做绝对贴合数据实际，缺点也在于，因为没有数学的定量框架，存在为解释而解释的嫌疑，各种解释会自相矛盾，比如说深度学习的性能优势，到底是因为中间表示(representation)有不变性还是因为有可重建性？两者不可兼得啊。而且参数比较多，数据集又杂，复现，协调所花的时间比重很高。现在深度学习的文章都花大力气去讲解网络如何构造，及对着实验结果看图说话，但是很少有本质的理解。</p><p>&ensp;&ensp;&emsp;所以抱着数学也不行，完全抛弃也不行，出路究竟在哪里？我觉得数学一定是有用的，只是现在大家太重目标函数的形式，一落笔就把自己限制住了。所以我开了个方向，干脆抛开目标函数，而是直接对数据做假设，提出算法，然后拿数学分析工具去分析算法在这类数据上会导致什么样的结果。</p><p>&ensp;&ensp;&emsp;照着这个思路，就有了2010年CVPR的数据驱动下降法（Data-Driven Descent)。本来梯度下降只能得到局部最优解，但是在带标定数据的指导下，“梯度”方向可以一直朝向最优解前进，直到收敛以得到全局最优，对于图像对齐这种非凸问题，这在传统上是不可想像的。有人可能就要问了，既然有带标定的数据，为什么不一步到位，像做预测和回归那样呢？精妙之处就在于，采用迭代方法，最差情况下所需的样本数目比一步到位要少得多！这个就在理论上有了突破。究其原因，正是利用了数据的特定结构。在这篇文章里，我们是要估计图像上的二维形变，而形变本身，是有类似群的性质的，利用这个性质，可以大批复用训练样本，以达到以一当千的效果。后来又做了一个多层的扩展，多用了一个图像上的局部结构，再次降低了样本复杂度，这个就是去年拿了马尔提名奖的工作。</p><p>&ensp;&ensp;&emsp;注意这里梯度打了引号，因为其实文章中根本没有目标函数，也不存在梯度，每个数据自己就是路标，指向最优解这个目的地——等一下，既然没有目标函数了，哪来的最优解呢？在这篇文章里，有一个生成模型，所谓收敛到全局最优解的意义，就是指“给定形变过的图像，能完美还原生成它的参数”，这样的意思。</p><p>&ensp;&ensp;&emsp;一句话，数据的特定结构比函数的具体形式更重要。事实上，函数形式是一种代数结构，典型的如线性性，二次形式，都是着眼于数学符号的组合，特定的组合相应会有特定的解法。但是代数结构虽然漂亮，却过于精致了，稍微动一动，组合变化了，就完全不可用。相比之下，分析结构（比如说A大于B，而B小于C）是丑了点，但是适用范围比较广，任何从数据中观察得到的相关性，都可以作为不等式放进去，然后想办法做推理。当然，其实前人早已想到了这一点，做了很多工作，把数据的性质作为目标函数的一项或几项以组合起来，但是最终还是屈从于最优化的传统框架，得到的是局部解。其实如果把优化过程打碎，依数据的特征而重新设计算法，是可能得到更漂亮更有理论性质的模型的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;『纵横江湖三十余载，杀尽仇寇，败尽英雄，天下更无抗手，无可柰何，惟隐居深谷，以雕为友。呜呼，生平求一败而不可得，诚寂寥难堪也。』&lt;br&gt;&amp;ensp;&amp;ensp;&amp;emsp;凌厉刚猛，无坚不摧，弱冠前以之与河朔群雄争锋。紫薇软剑，三十岁前所
      
    
    </summary>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>云计算概述</title>
    <link href="http://yoursite.com/2018/03/05/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/03/05/云计算概述/</id>
    <published>2018-03-05T07:54:22.315Z</published>
    <updated>2018-03-05T07:54:49.651Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！</p><p>&ensp;&ensp;&emsp;如果翻翻计算机技术的发展历史，几乎任何看似新的技术都有与之相对应的概念，只是当时的条件限制了其发展。随着计算能力的增强、存储空间的扩大以及网络带宽的提升，云计算的出现也就水到渠成了。</p><p>&ensp;&ensp;&emsp;云计算一般被定义在网络环境下计算资源的交付和使用方式，用户通过网络按需、易扩展的方式获得所需服务。换言之，即将处于整个互联网的空闲计算资源调度并集中起来，服务于某一台终端计算机，实现终端的处理能力提升。其本质就是服务的交付，也是能力的交付，其基本思想是资源的打散重组、灵活调度。云计算一般的支撑条件包括：1）足够的带宽网络；2）资源“池化”，按需伸缩的弹性机制；3）服务自治；4）后台自适应这种变化；5）按使用量计算成本。</p><p>&ensp;&ensp;&emsp;抽象思维是计算机领域的重要思想，底层被抽象成接口服务提供给上层调用，进而屏蔽掉底层的实现细节，一切资源都可以封装成服务。云计算服务交付模式可分为IaaS基础设施即服务、PaaS平台即服务以及SaaS软件即服务。IaaS是云服务的最底层，主要提供一些诸如计算、存储以及网络的基础设施；PaaS是云服务的中间层，主要提供软件部署平台及运行环境，抽象掉了硬件和操作系统的细节，可以无缝地扩展，用户只需关注自身的业务逻辑，无需关注底层；SaaS是云服务的最上层，它是软件的开发、管理以及部署都交给第三方，不需要关注技术问题，拿来即用。云计算的部署方式包括公有云、私有云、混合云以及社区云等。总而言之，云计算就是将计算资源、存储资源、网络资源以及安全服务抽象成可交付的服务。<br><img src="images/2018中国云计算各层产业生态图谱.png" alt="2018中国云计算各层产业生态图谱"><br>&ensp;&ensp;&emsp;云计算的实现紧紧地依托于虚拟化和分布式计算两项关键技术，虚拟化解决物理资源与用户使用解耦的问题，分布式计算解除用户和大型应用系统之间的绑定关系，两者的本质都是将资源和利用进行解耦，从而提升资源利用的自由度。云计算基础设施方面——云计算数据中心设计与管理及资源虚拟化技术；大规模数据处理方面——海量数据处理平台即其资源管理与调度技术；云计算服务保障方面——服务质量保障和安全与隐私保护技术。<br><img src="images/2018中国云计算产业生态图谱.png" alt="2018中国云计算产业生态图谱"><br>&ensp;&ensp;&emsp;云计算是一个比较庞大的生态系统，包括上游的云服务用户、中游的I-P-S各层云服务平台提供商以及下游的设备及网络提供商，不同行业均在建设属于自己的行业解决方案，即行业云，颠覆传统IT基础设施；整个生态技术类的岗位包括基础架构设计、应用开发、平台开发、平台运维以及安全类的服务保障等：<br><img src="images/云计算知识图谱.jpg" alt="云计算知识图谱"><br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（1）基础架构设计：涉及自动扩展、负载均衡、虚拟化以及容器类的计算服务，涉及DNS/CDN的网络服务，以及网络存储、对象存储、块存储以及灾备恢复的存储服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（2）应用开发：涉及Web应用、桌面虚拟化、移动应用以及IoT的前端应用，高性能计算和渲染的后端应用，以及类似CRM、ERP和生物科学的行业应用。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（3）平台开发：涉及操作系统、数据管理（SQL、缓存、检索、大数据以及机器学习）、身份认证以及包括日志和监控的管理服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（4）平台运维：涉及包含持续交付和持续集成的DevOps、配置以及部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;如果翻翻计算机技术的发展历史，几乎任何看似新
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>计算机知识体系</title>
    <link href="http://yoursite.com/2018/02/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/02/24/计算机知识体系/</id>
    <published>2018-02-24T14:49:31.726Z</published>
    <updated>2018-03-04T06:53:41.751Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；再次需要进行触类旁通，灵活运用以往的知识来理解、分析该项技术，理解其本质；最后进行比较权衡，用最高效的手段去解决它。</p><p>&ensp;&ensp;&emsp;计算机知识可分为三大类别：基础知识、领域知识以及工具化知识。基础知识即程序猿必须要掌握的通识性质的内容；领域知识即程序猿从事的技术方向的知识；工具化知识即程序猿职业生涯中实践所得的一些提高工作效率的碎片化知识。<br>&ensp;&ensp;&emsp;一、基础知识主要是数学+计算机五大件。程序猿工作中大量的内容都是业务相关的，所涉及的数学知识较少，但如果想要得以发展，精研某一方面则需要扎实的数学功底，否则这份工作就有天花板，也就容易被人替换。程序猿用到的数学，总结起来，主要是微积分、线性代数以及概率论三门课程。计算机五大件包括计算机组成原理、数据结构、操作系统、计算机网络以及编译原理，这五大件是从事IT领域所必备的基础知识。此外，掌握若干种编程语言，包括静态/动态、面向过程/面向对象、编译型/解释型。最后是软件工程的内容，如何写出艺术般的代码。<br>&ensp;&ensp;&emsp;二、领域知识。不同的方向需要掌握不同的领域知识。首先需要对该领域在业界的发展情况以及技术全景有所了解，然后是找到该领域存在的问题，最后通过自身的努力去解决问题。最终，使得自己的“T”型知识体系的纵向不断延伸。<br>&ensp;&ensp;&emsp;三、工具化知识。工具化知识即提升工作效率的工具或习惯，这个需要平时的积累和总结。</p><p>&ensp;&ensp;&emsp;如果套用“T”型知识管理体系，可以将基础知识看作是构成“T”型的原材料，领域知识看作是纵向的深度，而工具化知识看作横向的广度。原材料是基础，纵向的深度是支撑，横向的广度可以起到如虎添翼的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
