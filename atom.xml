<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Newton&#39;s</title>
  
  <subtitle>太阳黑子 | 力量、明智和运气</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.newtonsz.com/"/>
  <updated>2018-03-26T08:47:39.350Z</updated>
  <id>http://www.newtonsz.com/</id>
  
  <author>
    <name>Newton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>亚洲教父——香港、东南亚的金钱和权利</title>
    <link href="http://www.newtonsz.com/2018/03/26/%E4%BA%9A%E6%B4%B2%E6%95%99%E7%88%B6%E2%80%94%E9%A6%99%E6%B8%AF%E3%80%81%E4%B8%9C%E5%8D%97%E4%BA%9A%E7%9A%84%E9%87%91%E9%92%B1%E5%92%8C%E6%9D%83%E5%88%A9/"/>
    <id>http://www.newtonsz.com/2018/03/26/亚洲教父—香港、东南亚的金钱和权利/</id>
    <published>2018-03-26T01:53:39.962Z</published>
    <updated>2018-03-26T08:47:39.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="亚洲教父—香港、东南亚的金钱和权利"><a href="#亚洲教父—香港、东南亚的金钱和权利" class="headerlink" title="亚洲教父—香港、东南亚的金钱和权利"></a>亚洲教父—香港、东南亚的金钱和权利</h1><p>卡尔·马克思：“资本来到世间,从头到脚,每个毛孔都滴着血和肮脏的东西。”</p><p><div align="center"><br><img src="https://i.loli.net/2018/03/26/5ab85273d51f9.png" alt="图片1.png"><br></div></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>利用琐碎时间读完了乔•史塔威尔所著的《亚洲教父：香港、东南亚的金钱和权力》一书，作者长期在香港和北京从事新闻工作，读起来也许比亚洲富豪们的传记更加真实可信。该书是比较好的的财经内幕报道，文笔稍嫌枯燥，但学术性比想象的要强。</p><p>在一部香港黑帮题材的电影中，有这样一个有趣的细节：一名在赌场守门的年轻小混混，在周遭的喧哗与骚动中，聚精会神地阅读一本翻得卷了边的《李嘉诚传》。旁人对他说：这是本烂书，不要看了，如果看完这本书就能成为李嘉诚，那么写这本书的人早就发达了，还轮得到你？</p><p>以李嘉诚为代表的东南亚富豪们的传记可谓汗牛充栋，大抵都是同一种叙事方式：穷人家的孩子少有大志，千辛万苦，终成大事，所谓“嚼得菜根，百事可做”、“吃得苦中苦，方为人上人”。这种励志故事对穷人家的孩子颇很有吸引力。但是，事实真的如此吗？</p><p>这本书由香港著名财经评论家林行止作序，他指出：“有权无钱的政客与有钱无权的商人互补不足、合谋牟利组成无形‘财阀集团’的重要人物，他们攻守同盟、垄断市场、操纵价格、避免竞争、围标政府合约，并千方百计取得专利权”。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>整本书分为三个部分，共七章，讲述了教父们在历史变革中的变化，首先附上该书的目录：</p><ol><li>第一部：往昔的教父<br>第一章 历史背景</li><li>第二部：如何成为战后的教父<br>第二章 如何成为教父之一——适应<br>第三章 如何成为教父之二——核心现金流量<br>第四章 如何成为教父之三——构建一个机构——“奴隶头目”与鬼佬随从<br>第五章 如何成为教父之四——银行、贪婪的银行以及资本市场的乐趣</li><li>第三部：当代教父：保卫家珍<br>第六章 20世纪90年代：狂喜与清算<br>第七章 结语：这愚蠢的政治</li></ol><p>通过目录，不难看出作者的写作思路，即通过这些形形色色、不择手段致富的有趣的人来讲述历史、经济和发展的大事，那些教父只是整个东南亚政治环境的产物，归根到底，环境本身才是该地区的大问题。时势造英雄的论调应该是作者所秉持的观点，也就是在谈论任何历史人物或成功人士的时候，结合他所处的历史、政治和经济背景，也许这样才能更好地理解人和事。</p><h2 id="第一部：往昔的教父"><a href="#第一部：往昔的教父" class="headerlink" title="第一部：往昔的教父"></a>第一部：往昔的教父</h2><blockquote><p>“人受困于历史，而历史也受困于人。” 詹姆斯·鲍德温：《土生子札记》</p><h3 id="移民和殖民"><a href="#移民和殖民" class="headerlink" title="移民和殖民"></a>移民和殖民</h3><p>该部分讲述了东南亚发展的一些历史背景信息，具体包括泰国、马来西亚、印度尼西亚、菲律宾、新加坡和中国香港地区的当代经济景观在两种历史性力量的相互影响下成形：移民和殖民。移民去一个现存社会不是去输出文化，而是愿意接受当地的主流文化，而且最迅速的文化调整往往发生在最有抱负、勇往直前的移民当中，这些移民意识到若不能和当地精英阶层融为一体，要在经济上有所发展几乎是不可能的，这是第一代教父早就学到的深刻一课，而这也不难理解，因为东南亚是一个非常宽容的普世之地，人口稀少，这意味着对资源的竞争很少。而殖民者只能通过已有的政治精英和经济精英进行统治。</p></blockquote><h3 id="中国香港和新加坡"><a href="#中国香港和新加坡" class="headerlink" title="中国香港和新加坡"></a>中国香港和新加坡</h3><p>书中谈到香港和新加坡分别是城市型的地区和小国，确切地说是“港口城市型的地区和国家”，国际上争先恐后地赞美新加坡成为全球化的成功典范，事实上，新加坡的成功主要是因为它成了腐败的印尼商人和政府官员的洗钱中心，为了支撑经济，新加坡还新建赌场来吸引更多来自中国的赃款。为什么一贯强调儒家道德的新加坡，会开赌场，而且据说对卖淫态度比较宽松：它的定位就是一个洗钱中心，是经济罪犯的天堂。自从沦为殖民地，它们就提供了无关税贸易（很少或很本不问对方在做什么买卖），还成了寄放钱财的地方（很少或根本不问这些钱财是从哪里来的）。作为比较容易管理的城市型地区和小国，香港和新加坡玩弄着一个简单的经济把戏：他们从内地经济相对的低效能中套利。香港和新加坡作为走私贸易和合法贸易的区域中心，作为存储资本的地方，这两个地方一直以来都很重要，它们一直都是泰国、马来西亚、印尼和菲律宾等国大亨的安全避难所和可靠的投资场所。所以，处在一个严重管理不善、腐败严重、政治变化不定的地区中的拥有战略意义的深水港口城市型地区和小国，它们的繁荣与官方的经济哲学没有什么关系。</p><p>香港和新加坡的本地教父可以分为两类：一类从事房地产业，一类是从事银行业。由于这两个地区结构性的土地稀缺，从19世纪起，无论是从区域标准还是从国际标准来看，这里的房地产价格一直非常昂贵，而且波动很大，投机的回报率也很高。另外，香港教父的财富与附近澳门的走私和赌博得来的财富有着次要的结构性联系。香港的对外经济（贸易）确实是最自由，但它的内部经济，却一点不自由，地产/公用事业/零售等各行各业都被寡头所垄断。教父只是利用了东南亚区域经济中的低效率，才有了出色的业绩，他们或是通过个人关系从政府官员那里获得垄断性特许经营权，或是当政府企图控制工业发展时，从中获取利润，而出口是一项全球竞争的商业活动，这里就可以明白为什么东南亚很少有国际知名的企业了。</p><p>新加坡/香港这两个地方，在政治/经济体制上虽然差别很大，但他们的人均GDP却没有大的区别。它们的根本优势还是在于地理位置和市场定位。 </p><h2 id="第二部-如何成为战后教父"><a href="#第二部-如何成为战后教父" class="headerlink" title="第二部 如何成为战后教父"></a>第二部 如何成为战后教父</h2><blockquote><p>“我们习惯于在别人面前伪装自己，最后连我们自己都看不清自己了”——拉·罗什福科<br>这部分主要讲述了二战以后教父的发迹史。作者先是描述了整个东南亚的政治经济的大环境，然后揭示了教父们的日常生活与工作。</p></blockquote><h3 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h3><p>几百年来的事实指向了四代人的发展顺序：第一代人建立核心资本；第二代人加强与政治势力的联系，使财富不断扩大；第三代人努力守护反映父辈个性和人际关系的各种各样的资产；由于第四代人对事业的专注力不够，前辈们原先创立的集团赖以生存的关系网逐渐衰落，加上家族企业固有的缺陷，几代人的鸿基大业终于毁于他们之手。只用一代人时间就由穷人一跃变成富翁的事并不多见，而东南亚的国内经济过于受政府控制，这种事情就更不可能发生。</p><p>大亨们一直致力于把自己刻画成为出身卑微的白手起家者，通过自身的努力摆脱了贫困的魔爪。比如在香港，亚洲首富李嘉诚总喜欢说自己是教师的儿子，其父1940年身无分文来到了香港。他的香港长江集团网站声称：“为了扛起维持家庭生计的责任，李先生不到15岁就辍学，在一家塑料贸易公司找了份工作，每天工作16小时。1950年，他的勤奋、谨慎以及追求完美的精神让他有了自己的公司——香港长江实业。”事实上，李嘉诚读过几年书，后来在一个富有的舅舅那里工作。舅舅的家族拥有香港中南钟表有限公司。后来他成为重要的二流大亨，他的事业得以继续发展，在某种程度上可以说是因为他娶了老板的女儿。李嘉诚已故的妻子庄月明，是他的表妹，就是那位有钱舅舅的女儿。李嘉诚所经营的企业事实上是属于他岳父的，李嘉诚只是进一步发展了企业、但是话说回来，企业能够发展，李嘉诚确实有他的过人之处。在教父的发展阶段，和老板的女儿结婚是一个很普遍的现象。</p><p>使大亨们的公众形象进一步模糊不清的是他们的节俭名声，其中有些是合乎情理的，而有些则主要是为了公众的消遣，真正的节俭反映了一个企业家有强烈的保护财产的意识。一般情况下，他们只是在选择性节俭，这也无可厚非。</p><p>本书的一大观点，就是反驳流行的“文化论”/“种族论”：东南亚富豪普遍是华人后裔或有华人血统，不是因为“儒家文化”或“中华民族”，像李光耀所宣称的那样，有什么特别的优势，而是历史和环境的原因。就像中国古代的“商（朝）人”并不是有什么天生做贸易的优势，而是因为商朝灭亡后，其后裔被禁止进入政治等领域，而只能从事当时最低贱的贸易。欧洲的犹太人也是类似的情况。</p><p>当然，如作者一开始所说，指责这些富豪是没有意义的。寻租本身也是降低市场交易成本的一种方式，在特定市场情况下有其价值。而在过去几十年中，东南亚经济也确实有了长足的发展。但这种发展的主要动力在于出口生产业，而东南亚富豪几乎全部出自寻租者而不是这些出口制造业（没有一家具全球竞争力的品牌公司）这一事实，使人担忧这种发展的可持续性。当经济发展到一定程度，寻租者所赖以生存的屏障，就会成为制约进一步发展的障碍。而寻租者的利益所在，以及寻租者已具备的强大的经济/政治实力，使得打破这种屏障极度困难。而令人担忧的是，中国目前好象也正在体现这一问题。 </p><p>亚洲教父的历史是他们像变色龙一样灵活调整他们身份的历史。政治权贵和经济权贵的种族分割需要这个；殖民主义需要这个；中华的崛起以及它对海外爱国华侨的吸引力需要这个。大亨们早已经习惯于随需而变，适应各种环境和需求，从而达到自己的目的。</p><h3 id="核心现金流量"><a href="#核心现金流量" class="headerlink" title="核心现金流量"></a>核心现金流量</h3><p>普通教父帝国最重要的东西是特许经营权或许可证，有个这些东西就能够进行垄断或者寡头独占。一般教父都会有一个现金流的来源，比如房地产或博彩业，然后明面上会有很多公司，现金流就是作为这些公司的资金来源。</p><p>作者还有不少观点也很有见地：虽然大家都说中国做生意要靠“关系”，但由于中国社会的复杂性，“关系”也变得很复杂。作者举的一个例子是新加坡在苏州搞的新城，尽管李光耀是关系高手，搞定了中央政府，但苏州当地政府的不同意见，导致计划的失败。而真正的关系王国就是在东南亚：如果你搞定了当权者，就可以把国库当自己的ATM机用，直接从中央银行提钱。 </p><h3 id="构建一个机构——奴隶头目与鬼佬随从"><a href="#构建一个机构——奴隶头目与鬼佬随从" class="headerlink" title="构建一个机构——奴隶头目与鬼佬随从"></a>构建一个机构——奴隶头目与鬼佬随从</h3><blockquote><p>“如果有人跟你说他辛勤工作富了起来，问问他为谁工作？”——唐·尼尔森</p></blockquote><p>一个教父的工作有多辛苦呢？这是一个引起人们兴趣的问题，普遍的看法是他们工作很多小时，一般普通人是没有能力做到的。教父们花费许多时间在工作上，这是毫无疑问的，但是主要时间消耗在维持人际关系上。</p><h3 id="银行、贪婪的银行以及资本市场的乐趣"><a href="#银行、贪婪的银行以及资本市场的乐趣" class="headerlink" title="银行、贪婪的银行以及资本市场的乐趣"></a>银行、贪婪的银行以及资本市场的乐趣</h3><blockquote><p>我认为，对我们的自由而言，银行业机构比现役部队更加危险——托马斯·杰斐逊<br>除了拥有寡头垄断下的许可证与特许经营权之外，东南亚教父还需要另一个必备条件：获得资本的机会。香港战后的两个主要的大亨，一个是逝于1991年的包玉刚，另一个是李嘉诚，他们都是通过汇丰银行一下子从普通大亨变成了有杰出成就的大亨。</p></blockquote><h2 id="第三部-当代教父：保卫珍宝"><a href="#第三部-当代教父：保卫珍宝" class="headerlink" title="第三部 当代教父：保卫珍宝"></a>第三部 当代教父：保卫珍宝</h2><blockquote><p>“儒教的好处就是让亚洲人民心甘情愿地承受痛苦”——香港大亨陈启宗<br>该部分内容主要是分析亚洲金融危机中的教父们的生存状况，然后对比了东南亚和东北亚的政治经济模式，再一次用数据和事实来论证时势造英雄的论点。即便是金融危机，教父们也依然能够力挽狂澜，主要原因是他们所从事的行业，大多是房地产、电信以及零售等公共事业。</p></blockquote><p>东南亚的政治体制极其低能，如果反观东北亚的模式，我们就明白政治对于经济发展有多么重要了。日本在一个多世纪以来形成的东北亚模式正是建立在政治抉择上的，到目前为止，只有这种模式把一个非白人的贫穷国家建设成了一个发达国家。台湾是一个华人社会，是两个效仿日本模式的国家和地区中的一个，这也进一步说明了文化和种族对于经济发展来说是无关紧要的，尽管东南亚的领导一定要证明不是这样。</p><p>东北亚的模式有三点不同于东南亚模式，但归根到底是政治不同。</p><ol><li>首先是日本、韩国、中国台湾地区都进行了土地改革，因此确保了他们享受自下而上的发展过程，在其中几乎每个人都有一定的资金去创造更美好的生活。在东南亚，政治精英没有进行土地改革，最恶劣的是菲律宾，这个国家的统治阶级是最自私、最损人利己的，其财富和土地密不可分。</li><li>政府要挑选经济赢家时——发展中国家常常这样做——他们会支持有技术创造力的制造商和公司。在日本、韩国、中国台湾地区，几乎所有受政府支持的公司都是家族公司，而且习惯于贿赂政府官员，但那些公司不仅仅限制于贸易和服务业，由于财政公用设施的经济租金的许可证以及获得资本的许可证都是少量地发放的，所以那些宝贵的流动资金不太会陷入狭隘的、非生产性的、没有国际竞争力的商业精英手中。没有技术的工业化的长期含义，总是被高增长率、城市里霓虹闪烁的摩天大楼以及东南亚的大规模出口能力正在由外国投资者创造出来的所掩盖。韩国和中国台湾——就像日本，都拥有具有国际竞争力的品牌公司，但东南亚几乎一个也没有。</li><li>东北亚的人们总是比东南亚更严肃地把政治体制看做是发展的促进者。</li></ol><h2 id="寓言"><a href="#寓言" class="headerlink" title="寓言"></a>寓言</h2><p>书中结尾处有一则寓言，极富讽刺性：</p><blockquote><p>“在稍微年轻时，有位大亨很喜欢去很远的中国南海钓鱼。他们全家及公司里的高级管理人员每次都会离开几天。在旅程中，他们会在一个岛上停下来补充给养。这个岛的沙滩上有个小店，大亨很喜欢这个小店的店主。店主是个华人，白天要连续忙一天，半夜还常被黎明出发去捕鱼的本地渔民叫醒买柴油或其他一些必需品。渔民们常常因为没有钱而要求赊账，店主很豪爽，一概答应。他娶了位带孩子的海南女子（那时几乎没有人这样做），负责照顾她和她的女儿。几年来，教父逐渐和他成为了好朋友。教父观察到他们之间的唯一差别就是他出身于富人之家，受过极好的教育，继承家产当上了亿万富翁；而店主没命地工作，却赚不到钱，年纪轻轻就累死了。”</p></blockquote><p>以上就是该书的全部内容，文中大部分内容来源于原读本。<br>亚洲商界尤其是香港教父们有几个共同点：</p><ol><li>强调贫穷困苦的幼年生活，标榜白手起家创立商业帝国</li><li>利用战争或其他剧烈社会变革的历史机遇，夺取巨额财富，急速向上层社会流动</li><li>利用地域性的政治庇护和权力寻租，获得某种资源的垄断经营（或者是卡特尔）</li></ol><p>作者在阐明观点时，参考了大量的文献资料和客观事实，大体上做到了有据可考，有源可溯。在我阅读过程当中，不时地会联想到叔本华的《人生的智慧》一书中的观点：“人生好比乘舟，个人的努力奋斗和挣扎就像桨橹，而运气之重要好比风向，最后需要点勇气。”其中的运气又何尝不是时势了！</p><p>正确看待当前的“社会名流”，大多数可能都是言过其实，恐有故意煽动的嫌疑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;亚洲教父—香港、东南亚的金钱和权利&quot;&gt;&lt;a href=&quot;#亚洲教父—香港、东南亚的金钱和权利&quot; class=&quot;headerlink&quot; title=&quot;亚洲教父—香港、东南亚的金钱和权利&quot;&gt;&lt;/a&gt;亚洲教父—香港、东南亚的金钱和权利&lt;/h1&gt;&lt;p&gt;卡尔·马克思：“资本
      
    
    </summary>
    
      <category term="阅读与思考" scheme="http://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="阅读；经济与社会" scheme="http://www.newtonsz.com/tags/%E9%98%85%E8%AF%BB%EF%BC%9B%E7%BB%8F%E6%B5%8E%E4%B8%8E%E7%A4%BE%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.newtonsz.com/2018/03/23/%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF/"/>
    <id>http://www.newtonsz.com/2018/03/23/技术路线/</id>
    <published>2018-03-23T12:42:58.231Z</published>
    <updated>2018-03-24T10:24:24.103Z</updated>
    
    <content type="html"><![CDATA[<p>技术路线是指申请者对要达到研究目标准备采取的技术手段、具体步骤及解决关键性问题的方法等在内的研究途径，应尽可能详尽，每一步骤的关键点要阐述清楚并具有可操作性技术路线是指申请者对要达到研究目标准备采取的技术手段、具体步骤及解决关键性问题的方法等在内的研究途径，应尽可能详尽，每一步骤的关键点要阐述清楚并具有可操作性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术路线是指申请者对要达到研究目标准备采取的技术手段、具体步骤及解决关键性问题的方法等在内的研究途径，应尽可能详尽，每一步骤的关键点要阐述清楚并具有可操作性技术路线是指申请者对要达到研究目标准备采取的技术手段、具体步骤及解决关键性问题的方法等在内的研究途径，应尽可能详尽，每
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(四)——Keystone</title>
    <link href="http://www.newtonsz.com/2018/03/23/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E5%9B%9B)%E2%80%94Keystone/"/>
    <id>http://www.newtonsz.com/2018/03/23/Openstack学习与总结(四)—Keystone/</id>
    <published>2018-03-23T02:08:20.124Z</published>
    <updated>2018-03-24T10:24:24.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（四）——Keystone"><a href="#Openstack学习与总结（四）——Keystone" class="headerlink" title="Openstack学习与总结（四）——Keystone"></a>Openstack学习与总结（四）——Keystone</h1><p>安全已然成为继计算、存储和网络后的第四大IT基础设施了，云计算中的安全涉及数据安全、身份和访问管理安全、虚拟化安全以及基础设施安全。如下图为超融合一体机示意图。<br><img src="https://i.loli.net/2018/03/23/5ab468cc3b45d.png" alt="超融合.png"></p><h2 id="关于Keystone"><a href="#关于Keystone" class="headerlink" title="关于Keystone"></a>关于Keystone</h2><blockquote><p>Keystone is an OpenStack service that provides API client authentication, service discovery, and distributed multi-tenant authorization by implementing OpenStack’s Identity API. It supports LDAP, OAuth, OpenID Connect, SAML and SQL.——openstack官网</p></blockquote><p>Keystone作为Openstack中一个独立的提供安全认证的模块，主要的作用如下：</p><ol><li>管理用户及其权限；</li><li>维护Openstack Serivce的Endpoint；</li><li>Authentication（认证）和 Authorization（鉴权）。</li></ol><p>在Openstack的整体框架中，Keystone的作用类似一个服务总线，其他服务通过Keystone来注册其服务的Endpoint（可理解为服务的访问点或URL），针对这些服务的任何调用都需要经过Keystone的身份认证，并获得服务的Endpoint来进行访问。</p><h2 id="Keystone基本概念"><a href="#Keystone基本概念" class="headerlink" title="Keystone基本概念"></a>Keystone基本概念</h2><ul><li><strong>User</strong><blockquote><p>Users represent an individual API consumer. A user itself must be owned by a specific domain, and hence all user names are not globally unique, but only unique to their domain.</p></blockquote></li></ul><p>​    User 指代任何使用 OpenStack 的实体，可以是真正的用户，其他系统或者服务。</p><ul><li><p><strong>Credentials</strong><br>Credentials 是 User 用来证明自己身份的信息，可以是：<br>1.用户名/密码。<br>2.Token。<br>3.API Key。<br>4.其他高级方式。</p></li><li><p><strong>Authentication</strong><br>Authentication 是 Keystone 验证 User 身份的过程。User 访问 OpenStack 时向 Keystone 提交用户名和密码形式的 Credentials，Keystone 验证通过后会给 User 签发一个 Token 作为后续访问的 Credential。</p></li><li><p><strong>Token</strong><br>Token 是由数字和字母组成的字符串，User 成功 Authentication 后 Keystone 生成 Token 并分配给 User。</p></li></ul><ol><li>Token 用做访问 Service 的 Credential。</li><li>Service 会通过 Keystone 验证 Token 的有效性。</li><li>Token 的有效期默认是 24 小时。</li></ol><ul><li><strong>Project</strong><br>Project 用于将 OpenStack 的资源（计算、存储和网络）进行分组和隔离。根据 OpenStack 服务的对象不同，Project 可以是一个客户（公有云，也叫租户）、部门或者项目组（私有云）。</li></ul><p>请注意：</p><ol><li>资源的所有权是属于 Project 的，而不是 User。</li><li>在 OpenStack 的界面和文档中，Tenant / Project / Account 这几个术语是通用的，但长期看会倾向使用 Project。</li><li>每个 User（包括 admin）必须挂在 Project 里才能访问该 Project 的资源。 一个User可以属于多个 Project。</li><li>admin 相当于 root 用户，具有最高权限。</li></ol><ul><li><p><strong>Service</strong><br>OpenStack 的 Service 包括 Compute (Nova)、Block Storage (Cinder)、Object Storage (Swift)、Image Service (Glance) 、Networking Service (Neutron) 等。每个 Service 都会提供若干个 Endpoint，User 通过 Endpoint 访问资源和执行操作。</p></li><li><p><strong>Endpoint</strong><br>Endpoint 是一个网络上可访问的地址，通常是一个 URL。Service 通过 Endpoint 暴露自己的 API。 Keystone 负责管理和维护每个 Service 的 Endpoint。</p></li><li><p><strong>Role</strong><br>安全包含两部分：Authentication（认证）和 Authorization（鉴权）</p></li></ul><ol><li>Authentication 解决的是“你是谁？”的问题</li><li>Authorization 解决的是“你能干什么？”的问题</li></ol><p>Keystone 借助 Role 实现 Authorization；Service 决定每个 Role 能做什么事情 ，Service 通过各自的 policy.json 文件对 Role 进行访问控制。</p><ul><li><strong>Domain</strong><br>Keystone中的域是一个虚机的概念，由特定的Project来承担。<br><img src="https://i.loli.net/2018/03/23/5ab47e5e50691.png" alt="backends.png"><br>基于这些核心概念，Keystone主要提供了Authentication（认证）、Token（令牌）、Catalog（目录）和Policy（安全策略，或者说访问控制）4个方面的服务。如上图所示。</li></ul><ol><li>Authentication：对用户的身份进行验证，用户的身份凭证通常是以用户名和密码形式呈现，认证服务同时提供了与该用户相关的元数据。</li><li>Token：确认用户的身份之后，会给用户提供一个核实该身份并且可以用户后续资源请求的令牌，Token服务则验证并管理用于验证身份的令牌。</li><li>Catalog：Catalog服务对外提供一个服务的查询目录，或者说是每个服务的可访问的Endpoint列表。</li><li>Policy：一个基于规则的身份验证引擎，通过配置文件来定义各种动作与用户角色的匹配关系。</li></ol><p>Keystone在用户与服务之间架起了一道桥梁：用户从Keystone获取令牌以及服务列表；用户访问服务时，发送自己的令牌；相关的服务向Keystone求证令牌的合法性。</p><h2 id="Keystone工作流程"><a href="#Keystone工作流程" class="headerlink" title="Keystone工作流程"></a>Keystone工作流程</h2><p><img src="https://i.loli.net/2018/03/23/5ab47e382f90e.png" alt="keystone.png"><br>如上图为Keystone的工作流程图：</p><ol><li>用户Alice发送自己的凭证到Keystone，Keystone认证通过后，返回给Alice一个unscoped token以及服务目录。</li><li>Alice通过unscoped token向Keystone查询当前环境下的项目列表，Keystone验证token成功后，返回Alice一个项目列表。</li><li>Alice选择一个项目，发送自己的凭证给Keystone申请一个scoped token，Keystone验证后，返回scoped token。</li><li>Alice凭借scoped token发送请求到计算服务的Endpoint以创建虚拟机，Keystone验证scoped token（包括该Token是否有效，是否有权创建虚机等）成功后，再把请求转发到Nova，最终创建虚拟机。</li></ol><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><p>OpenStack 排查问题的方法主要是通过日志。每个 Service 都有自己的日志文件。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1.<a href="https://mp.weixin.qq.com/s/QtdMkt9giEEnvFTQzO9u7g" target="_blank" rel="noopener">每天5分钟玩转 OpenStack</a><br>2.<a href="https://www.safaribooksonline.com/library/view/identity-authentication-and/9781491941249/ch01.html" target="_blank" rel="noopener">Fundamental Keystone Topics</a><br>3.<a href="https://wiki.openstack.org/wiki/Keystone" target="_blank" rel="noopener">Keystone Wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（四）——Keystone&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（四）——Keystone&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（四）——Keystone&quot;&gt;&lt;/a&gt;Opens
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="http://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(一)——虚拟化</title>
    <link href="http://www.newtonsz.com/2018/03/22/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E4%B8%80)%E2%80%94%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    <id>http://www.newtonsz.com/2018/03/22/Openstack学习与总结(一)—虚拟化/</id>
    <published>2018-03-22T07:17:11.665Z</published>
    <updated>2018-03-23T02:29:52.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（一）：虚拟化"><a href="#Openstack学习与总结（一）：虚拟化" class="headerlink" title="Openstack学习与总结（一）：虚拟化"></a>Openstack学习与总结（一）：虚拟化</h1><blockquote><p>我坚信最好的学习方法是分享。对于知识，只有把它写出来并能够让其他人理解，才能说明真正掌握了这项知识。——CloudMan</p></blockquote><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p>虚拟化是云计算的基础，简单来说，虚拟化技术使得在一台物理机器上能够运行多台虚机，虚机共享物理机的CPU、内存、IO硬件资源，但逻辑上虚机之间是相互独立的。</p><p>物理机一般称为宿主机（Host）,运行在Host上面的虚机称为客户机（Guest）。Hypervisor程序将物理机的资源虚拟化，并提供给Guest使用。</p><p>根据Hypervisor的实现方式和所处的位置，一般将虚拟化分为：1型虚拟化和2型虚拟化。</p><h3 id="1型虚拟化"><a href="#1型虚拟化" class="headerlink" title="1型虚拟化"></a>1型虚拟化</h3><p>Hypervisor直接安装在物理机上，多个虚机在Hypervisor上运行。Hypervisor实现方式一般是一个特制的Linux系统。Xen和VMWare的ESXi都属于该类型。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab366fba09bd.jpg" alt="11"><br></div></p><h3 id="2型虚拟化"><a href="#2型虚拟化" class="headerlink" title="2型虚拟化"></a>2型虚拟化</h3><p>物理机首先安装常规的OS，Hypervisor作为OS上的一个程序模块运行，并对虚机进行管理。KVM、VirtualBox和VMWare Workstation都属于该类型。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab368790ad51.jpg" alt="2型虚拟化.jpg"><br></div></p><h2 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在x86平台上最常用的Hypervisor虚拟化方案是KVM，即Kernel-Based Virtual Machine。换句话说，KVM是基于Linux内核实现的。KVM有个内核模块kvm.ko，只用于管理虚拟CPU和内存。IO的虚拟化（存储和网络设备）是由Linux内核和Qemu来实现的。</p><h3 id="Libvirt"><a href="#Libvirt" class="headerlink" title="Libvirt"></a>Libvirt</h3><p>Libvirt是Hypervisor KVM的管理工具，其包含三个模块：</p><ol><li>libvirt。作为后台daemon程序，它接收和处理API请求；</li><li>API库。使得开发人员能够开发基于Libvirt的高级工具，比如图形化KVM管理工具virt-manager；</li><li>virsh。常用的KVM命令行工具。<h3 id="KVM实战"><a href="#KVM实战" class="headerlink" title="KVM实战"></a>KVM实战</h3><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4>KVM属于2型虚拟化，即其运行在OS上面的。KVM的实战，常规步骤如下：</li><li>获得源码。</li><li>配置系统环境以及源码依赖源。</li><li>安装部署。</li><li>HelloWorld测试。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install qemu-kvm qemu-system libvirt-bin virt-manager bridge-utils vlan</span><br></pre></td></tr></table></figure></li></ol><p>具体安装包说明：</p><ul><li>qemu-kvm和qemu-system。KVM和QEMU的核心包，提供CPU、内存和IO虚拟化功能。</li><li>libvirt-bin。libvirt管理KVM的工具。</li><li>vir-manager。KVM图形化工具。</li><li>bridge-utils和vlan。主要用于网络虚拟化，KVM网络虚拟化的实现是基于linux-bridge和VLAN。<h4 id="启动KVM虚机"><a href="#启动KVM虚机" class="headerlink" title="启动KVM虚机"></a>启动KVM虚机</h4>操作步骤类似于Wmware workstation上创建虚机。首先启动KVM图形化界面：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> virt-manage</span><br></pre></td></tr></table></figure></li></ul><p>接下来步骤就是针对虚机进行资源的配置，包括虚机名字、镜像文件、CPU和内存分配等等。然后就可以查看宿主机上的虚机：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> virsh list</span><br></pre></td></tr></table></figure></p><p>最后，利用QEMU来虚拟IO资源，包括存储和网络。</p><h3 id="IO虚拟化"><a href="#IO虚拟化" class="headerlink" title="IO虚拟化"></a>IO虚拟化</h3><p>IO虚拟化包括存储和网络设备的虚拟化。</p><ol><li>KVM的存储虚拟化是通过存储池（Storage Pool）和卷（Volume）来管理的。</li><li>网络虚拟化中最重要的两个东西：Linux Bridge和VLAN。<h4 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h4></li></ol><p><strong>Linux Bridge基本概念</strong></p><blockquote><p>假设宿主机有1块与外网连接的物理网卡eth0，上面运行了1个虚机VM1，如何让VM1能够访问外网？<br>具体的方案：</p><ol><li>将物理网卡eth0直接分配给VM1，但这样宿主机就没有网卡可用，即无法访问了；新加的虚机也没有多余的网卡可用。</li></ol></blockquote><ol><li><p>给VM1分配一个虚拟网卡vnet0，通过Linux Bridge br0将eth0和vnet0连接起来，即如下图：<div align="center"></div></p><p><img src="https://i.loli.net/2018/03/22/5ab3729488083.jpg" alt="Linux_Bridge.jpg"><br></p></li></ol><p>Linux Bridge是Linux上用来做TCP/IP二层协议交换的设备，其功能可以理解为一个二层交换机或Hub。多个网络设备可以连接到同一个Linux Bridge，当某个设备收到数据包时，Linux Bridge会将数据转发给其他设备。<br>如果现在新增一台虚机VM2，将其vnet1连接到br0上，现在VM1和VM2之间可以通信，同时两台虚机均可以访问外网。如下图所示。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab373c87c456.jpg" alt="Linux_Bridge2.jpg"><br></div><br>virbr0是KVM默认创建的一个Bridge，其作用是为连接其上的虚机网络提供NAT访问外网的功能。</p><p> <strong>VLAN</strong></p><p>LAN，即Local Area Network，本地局域网，通常使用Hub和Switch来连接LAN中的计算机。一个LAN表示一个广播域，即LAN中的所有成员都会收到任意一个成员发出的广播包。</p><p>VLAN表示Virtual LAN，一个带有VLAN功能的Switch能够将自己的端口划分出多个LAN。计算机发出的广播包可以被同一个LAN中的其他计算机收到，但位于其他LAN的计算机则无法收到。简单讲，VLAN将一个交换机分成了多个交换机，在L2将计算机隔离到不同的VLAN中。VLAN的隔离是L2上的隔离，即L2的广播包无法跨越VLAN的边界。<br>通常交换机的端口分为两种配置模式：Access和Trunk。如下图所示。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab37f2b2eedd.jpg" alt="VLANTrunking1.jpg"><br></div></p><ol><li><strong>Access口</strong>：端口均打上VLAN的标签，表明该端口属于哪个VLAN。不同的VLAN用VLAN ID来区分，其范围是1-4096，Access口均与计算机网卡直接相连，这样从该网卡出来的数据包流入Access口后就被打上了所在VLAN的标签，其只能属于一个VLAN。</li><li><strong>Trunk口</strong>： 不同VLAN中的计算机之间的通信需要借助Trunk口来实现。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab3835cdb91a.jpg" alt="brvlan0.jpg"><br></div><br>如上图所示，eth0为宿主机的物理网卡，eth0.10与之相连。eth0.10为VLAN设备，其VLAN ID就是VLAN 10。eth0.10挂载命名为brvlan 10的Linux Bridge上，虚机VM1的虚拟网卡vnet0也挂在brvlan 10上。这样宿主机就用软件实现了一个交换机，上面定义了一个VLAN 10。eth0.10、brvlan10和vnet0都分别接到VLAN 10的Access口上，而eth0就是一个Trunk口。VM1通过vnet0发出的数据包会被打上VLAN10的标签。<br>新增一个VLAN 20，如下图所示。<div align="center"><br><img src="https://i.loli.net/2018/03/22/5ab3835cdcf55.jpg" alt="brvlan1.jpg"><br></div><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>1.<a href="https://mp.weixin.qq.com/s/QtdMkt9giEEnvFTQzO9u7g" target="_blank" rel="noopener">每天5分钟玩转 OpenStack</a><br>2.<a href="http://computernetworkingsimplified.in/data-link-layer/overview-vlan-basic-theory-operation/" target="_blank" rel="noopener">Trunk and Access</a><br>3.<a href="https://en.wikipedia.org/wiki/Virtual_LAN" target="_blank" rel="noopener">VLAN</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（一）：虚拟化&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（一）：虚拟化&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（一）：虚拟化&quot;&gt;&lt;/a&gt;Openstack学习与总结（一）：虚拟化&lt;/
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="http://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>牛津通识读本之心理学</title>
    <link href="http://www.newtonsz.com/2018/03/15/%E7%89%9B%E6%B4%A5%E9%80%9A%E8%AF%86%E8%AF%BB%E6%9C%AC%E4%B9%8B%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <id>http://www.newtonsz.com/2018/03/15/牛津通识读本之心理学/</id>
    <published>2018-03-15T01:25:11.901Z</published>
    <updated>2018-03-15T12:06:40.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="牛津通识读本之心理学"><a href="#牛津通识读本之心理学" class="headerlink" title="牛津通识读本之心理学"></a>牛津通识读本之心理学</h1><blockquote><p>牛津通识读本系列 (Very Short Introductions series，简称VSI系列) ，是<a href="https://youtu.be/DGgAmIKCqvA" target="_blank" rel="noopener">牛津大学出版社</a>自1995年开始出版的一套系列丛书。这套书的每一本都对一个特定的主题进行简洁而精炼的介绍。几乎所有读本都由该领域公认的专家撰写，篇幅为100–150页，并包括进一步深度阅读的建议。作者们往往提供了个人的见解，但每个读本都力图做到中立和完整。<a href="https://zh.wikipedia.org/wiki/%E7%89%9B%E6%B4%A5%E9%80%9A%E8%AF%86%E8%AF%BB%E6%9C%AC" target="_blank" rel="noopener">（维基百科）</a></p></blockquote><p><div align="center"><br><img src="https://img3.doubanio.com/lpic/s24587241.jpg" alt="生活中的心理学"><br></div><br>过去有一阵子，我对阅读类似公众号或博客之类的文章近乎到了痴迷的程度；现在回过头来想，几乎没能留下丝毫的印象，更别奢望能有所收获。我试着分析了下其中缘由，当时近乎痴迷，可能是因为所读内容符合我的价值诉求，正向增强了我的认同感，换句话说，作者投其所好了；事后又全无印象，一方面是对所读内容不加思索，另一方面内容本身就是只言片语，不成系统，有故作深刻、溜须拍马的嫌疑。</p><p>偶然机会，接触到牛津通识读本系列，读了其中关于心理学的部分，我是睡前看的，深感其内容的系统性和客观性，读来也不觉枯燥乏味，反倒是有种润物细无声的感受。下面对心理学的部分做个简要的分享。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>我读的是韩邦凯的译本，咋看其目录，甚觉这才是科普书应有的态度——逻辑清晰，表述简明，内容客观。</p><ol><li><u>什么是心理学？怎样研究心理学？</u></li><li><u>什么进入到我们的头脑里？知觉</u></li><li><u>什么留在我们的头脑里？学习和记忆</u></li><li><u>我们如何利用头脑中的东西？思考、推理和沟通</u></li><li><u>为什么我们会做我们所做的事情？动机和情绪</u></li><li><u>有没有固定的样式？发展心理学</u></li><li><u>我们能不能把人进行分类？个体差异</u></li><li><u>在出问题时，发生了什么？变态心理学</u></li><li><u>我们如何相互影响的？社会心理学</u></li><li><u>心理学的作用？</u></li><li><u>索引</u></li></ol><p>读完目录，稍加思索即可理出本书的行文结构。首先给出了人类心理学的定义以及研究者是怎样去研究该学科的；然后由外而内的分析单独个体的心理变化，即输入、处理以及输出；进而提炼出个体之间的共同点和差异化；随后，分析了当出现反常行为时，其背后的心理变化是怎样的；最后，研究个体之间是怎样相互影响的。这样就围绕人，很自然地将心理学的几个研究方向给阐述明白了。</p><h2 id="什么是心理学？怎样研究心理学？"><a href="#什么是心理学？怎样研究心理学？" class="headerlink" title="什么是心理学？怎样研究心理学？"></a>什么是心理学？怎样研究心理学？</h2><p>这章主要是围绕心理学的定义、心理学的研究方法以及心理学的主要分支给出了说明。<br>在1890年，作为当代心理学的创始人之一的威廉·詹姆斯，对心理学的定义是“精神生活的科学”，他认为人类心理学由一些基本成分构成：思想和情感、存在于时空中的物质世界、以及了解它们的方法。任何科学的发展都取决于它所依据的数据，心理学和其他科学的目标是一样的：描述、解释、预测，并学会控制或调整本学科的所研究的过程。</p><p>心理学是一门处于发展初期的科学，故其研究方法和理论不是很成熟。心理学家常用的方法包括以下几种：</p><ul><li>实验室里的实验：由某种理论衍生出来的某种假说在受控制的条件下受到检测，这些条件旨在减少两种偏见，一是在实验对象的选择上，二是被研究变量的测量上。实验结果应是可复制的，但不可以推广到更接近现实生活的环境中去。</li><li>现场实验：在实验室之外，在更自然的条件下对假设进行检验。</li><li>相关法：评估两个或几个变量之间关系的强弱关系，即数据分析的方法。</li><li>行为观察：观察行为的方法应是可信的。</li><li>自我报告和问卷研究：它们提供主观数据，基于自觉。它们的信任可通过好的检测设计来保证，也可以通过对大量有代表性的样本进行标准化的检验来保证。还有包括个案研究与访问和调查等等。</li></ul><p>心理学的主要分支：研究心理功能紊乱及克服办法的变态心理学；强调能直接通过观察行为来搜集数据的行为主义心理学；研究不同的物种、遗传模式的行为的决定因素的生物心理学；致力于找出信息是怎么搜索、处理、理解和使用的认知心理学；研究有机体在某一生物内是怎样变化的发展心理学；研究广泛的人群，以便找出和理解典型的差异的个体差异心理学；致力于找出生理状态对心理的影响，以及生理状态对感官、神经系统及大脑工作的影响的生理心理学；研究社会行为，以及个体与集体之间的相互作者的社会心理学。实际上，心理学的不同分支之间以及心理学和相关领域之间，有相当的部分是重叠的。</p><h2 id="输入、处理、输出"><a href="#输入、处理、输出" class="headerlink" title="输入、处理、输出"></a>输入、处理、输出</h2><p>第2章至第5章的主要内容是集中在心理学家提出的四个重要问题上：</p><ol><li>什么进入到我们的头脑里面？——知觉和注意</li><li>什么留在我们的头脑里面？——学习和记忆</li><li>我们是怎样处理头脑里的东西的？——思维、推理和沟通</li><li>我们为什么会有这样的行为？——动机和情绪</li></ol><h3 id="什么进入到我们的头脑中？"><a href="#什么进入到我们的头脑中？" class="headerlink" title="什么进入到我们的头脑中？"></a>什么进入到我们的头脑中？</h3><p><strong>知觉：</strong>采集周边世界的信息不是一个被动的的反映过程，而是一个复杂的、主动的过程，头脑和感觉一起工作，帮助我们构建对现实的知觉。知觉的第一阶段是要找到说明外在实物的信号，我们对现实的了解要受到人类感官能力的限制。所有的感官环境中变化的反应要比静止状态的反应更为灵敏。</p><p><strong>注意</strong>： 知觉包括的不只是掌握辨别的技巧，它还包括提出假设、做出决策以及运用组织原则。注意是一种方法，我们用这种方法来挑选进入头脑里的东西，但是，我们并非一次只能注意一件事情。注意是个敏感的过程，没有感官上的多样性，知觉系统就会出现习惯化，注意力就会不集中。</p><p>把知觉和注意结合起来看，我们实际感知的东西既受内部因素（如情绪和身体状况）的影响，也受外部因素的影响。害怕被社会拒绝的人，更容易感受到不友好的征兆，比如不坏好意的面部表情。心理学家提出，感知与两种处理信息的方法有关：</p><ul><li>我们看见了真实世界的某样东西，它触发了一系列内部的认知过程，即自下而上的加工。这种由“刺激驱动”的处理方法反映了我们对外部世界的反映，当观看条件好的时候，这种方法将占主导地位。</li><li>自下而上的加工反映了由概念驱动的重要过程的影响。即便在对光线和声波做出反应时，我们每个人都会把过去的经历带到眼前的任务上，但假如观看条件不好，或我们的期望过于强烈，我们比较会依赖内部信息而忽略外部信息。</li></ul><p>总之，我们所感的现实，从某种程度上来说，也是一座座由人修建的建筑物，我们每个人都在不断地为它添砖加瓦，心理学家帮我们理解了许多决定行为的条件，一旦我们了解了是什么进入到了头脑中，我们就可以继续探究其中有多少留在了头脑中，进而变成了我们学习和记忆的基础。</p><h3 id="什么留在我们的脑中？"><a href="#什么留在我们的脑中？" class="headerlink" title="什么留在我们的脑中？"></a>什么留在我们的脑中？</h3><p><strong>学习</strong><br>学习是创建持久的联结，婴儿适应的那么快那么好，是因为他们愿意学习，因为他们对具有某些关联的事情反应特别强烈，其中包括相倚（什么和什么一起发生）、差异（与常规的不同）以及交互作用（和别人的相互作用）。</p><ul><li>相倚使人学会了如何使事情发生，例如打开水龙头，通常就有水流出来。通过学习开龙头、关龙头，我们就学会了控制水流。小婴儿重复地探索相倚：来回挥动胳膊，打一样东西，使它发出声音，一次又一次地打这个东西，直到能够控制弄出的声音为止。相倚是其他类型的学习（如技术学习）的重要基础。一旦你掌握了一种技巧，便可不假思索地完成某事。</li><li>一旦你知道期望是什么，差异就会变得很有意思。孩子世界的小变化引起了孩子的探索，并帮助孩子去学习，但是，如果一切突然中断，那又会令孩子十分痛苦。同样，用不同的方式唱一首歌会很有意思，只要你知道其中的基本规则。<u>这种靠制造差异来学习的能力是持久的和基本的。年长一些的人如果已有相关的知识储备，因为留意差异并根据差异做出调整，那么，他们能较快地学会新的知识，但他们却很难学会完全陌生的东西。</u></li><li>对于婴儿，为了生存，和别人相互作用是必要的。婴儿先是哭和看，后来是用笑及更复杂的方式来参与这种交互作用，认识并控制自己的世界。</li></ul><p>婴儿对以上三种关联特别容易起反应，而这些方面激活了与学习有关的一些基本过程。典型的学习如下：<br><strong>1</strong>.最基本的学习恐怕是联想学习或条件作用了。经典性条件作用最早是在20世纪20年代由巴甫洛夫在研究狗的时候，找到了一种方法来测量狗对食物产生反应时所分泌的唾液，然后，他留意到狗在得到食物之前就会开始分泌唾液了。唾液的这种反射的或无条件的反应是由于食物相关联系的东西引起的，如碗的出现、带来食物的等。巴甫洛夫认为实际上任何刺激都可以变成唾液的条件刺激，于是他得出结论，当先前的一个中性刺激和无条件刺激联想在一起时，学习就发生了。</p><p><strong>2</strong>.B.F.斯金纳最早研究了操作性条件作用，解释了在学习中强化所起到的作用。操作性条件作用提供了一种有力的手段来控制学习什么和做什么。这一理论的主要设想是，如果一个行为后面跟着一个好的结果，那么这个行为就会被重复。因此，拿不变的计时工资去做枯燥的重复工作的人，和拿计件工资的人相比，前者很快就失去了工作的劲头。对于奖罚机制，斯金纳对惩罚有强烈的不满，惩罚很容易和负强化相混淆，但两者大不相同。他认为惩罚不是帮助人学习的有效方法，因为惩罚既痛苦又无益，<u>惩罚压制了一种行为，却不说该做什么来替代它</u> 。惩罚可能有效（比如能减少某些精神失常儿童的自我伤害行为），也可以用温和而有效的方式来实施。但是，惩罚的效果可能是暂时的，或只有在特殊情况下才有效（青少年和朋友在一起可能吸烟，但在父母面前不会）。惩罚往往不容易马上执行，而且传达的信息很少，还可能无意间成为了奖赏（老师对调皮学生的申斥可能吸引其他人带强化性的注意）。</p><p><strong>3</strong>.观察学习是靠模仿和观察别人来学习的，它提供了一条捷径，绕过了必要的尝试和错误，也绕过了联想学习所依靠的即时强化。学校里的学习大部分都是这种类型，它也解释了我们是怎样获得关于社区社会规范的看法和信息的。</p><p>学习的认知理论脱离了联想的观点，试图解释其他过程的影响，如注意、想象、思维和情感。一旦我们开始了解新学到的东西和头脑中原有的东西结合的方法，学习和记忆的界限就变得模糊起来了。</p><p><strong>记忆</strong><br>巴特莱说过，记忆不单单是把我们接受的信息准确的记载下来，记忆还得让新信息融入原有的信息，并创造出一套有意义的解说。</p><p>我们对事件意义的记忆要比对事件细节的记忆准确很多。记忆模式大概是从感觉存储、短时存储到长期存储的发展过程。</p><p>于是，我们现在看到的，学习和记忆也是主动的、建构性的过程。另外，我们记忆的准确性往往是无关紧要的，为了充分利用留在头脑里的东西，更重要的可能使记住意义并学会找出细节，而不是仅仅准确地记住所发生的事情。</p><h3 id="我们如何利用头脑中的东西？"><a href="#我们如何利用头脑中的东西？" class="headerlink" title="我们如何利用头脑中的东西？"></a>我们如何利用头脑中的东西？</h3><p>前面谈到，”原料“，即进入和后来留在头脑中的东西，不仅仅是由客观现实的本质决定的，也是由感知和注意能力以及学习和记忆的过程决定的。如果我们能组织我们的知觉，使它们有意义，需要时能回忆信息，并用信息来思维、推理和沟通，那我们就可以订计划、出主意、解决问题，想象或许有点稀奇古怪的各种可能性，并把这一切告诉别人。<br><strong>思维</strong><br>我们对概念的理解来自哲学家、语言学家和心理学家的工作，概念是思维的基础材料，概念帮助我们组织思维，对我们的经历做出恰当的反应。概念就是把我们知道的东西加以简化和归纳后得出的抽象信息，利用概念使得我们可以用符号来表示我们知道的东西，用一样东西代表另一样东西。有一种理论建议我们按一种原型，或一套特定的要点，把概念组织起来，心理学家已经发现：如果一个实物离这个原型越远，就越不容易学习、记忆和辨认。<strong>原型理论</strong>能解释具体概念以何种方式影响我们的思维，但它在说明我们所用的抽象概念方面则有不足之处。<br><strong>推理</strong><br>推理就是运用我们所掌握的信息，以便得出结论、解决问题、做出评判等等。哲学家和逻辑学家区分去三种不同类型的推理，即演绎推理、归纳推理以及辩证推理，尽管这三种推理为理性提供了基础，但是它们依然明显受到心理和逻辑过程的影响。</p><ul><li>演绎推理。遵循正式的规则让我们得出结论，而结论又必然来自结论所依据的前提。当不知道前提是否真实的时候，适用演绎推理常会出错，因为我们的思维会偏向于增强已有信念而不想接受与它们对立的信息。</li><li>归纳推理。科学领域依赖较多的一种推理方法，研究人员做了许多仔细的观察，然后才得出结论。“玛丽批评了我所说的人，并立刻否定了我的论点”，“因此，玛丽是一种吹毛求疵的人”。归纳推理让我们得出结论，看来是基于我们自身经历的，在大多数情况下，倒也不会错。然而，这种概率思维可能是错的，不仅因为会出现不寻常和罕见的事件，还有许多别的原因。正如威廉·詹姆斯所言“许多人以为自己在思考，其实他们只是在重新组合他们的偏见”。</li><li>辩证推理。评估相反的观点，进行批胖性思维以辨别真伪或解决问分歧的能力。当某人的正确与否或要别人接受他的观点变得很重要时，他在心理上就会很难接受辩证推理，因为当人们正确时，自尊心就会加强，但当人们错误时，自尊就会受到打击。许多心理因素干扰了我们以开放的头脑进行思维的能力，譬如经验、情感以及爱好。<u>为了辩证地进行推理，我们需要吸收和记住许多复杂的信息，并且需要不动情感地、批判性地分析问题。</u> 我们的情感和记忆给我们的推理能力设置了较大的限制，我们接受到的信息的“包装”也是如此。例如电视上以既浓缩又容易消化和记住的“原声摘要”方式宣传的政治信息，明显地干扰了批判性的思维。以消遣或娱乐的方式呈现在我们面前的、简化了想法，很容易被人获取。因此，思维也会被信息传达的方式所影响，而心理因素会增加思维和推理汇总的复杂性。<br><strong>沟通</strong><br>不论什么时候，我们都可以用新的方式把头脑中的意象结合起来，去创造新的东西、解决问题，或者表达自己，这时，我们就是在创造，其中最明显的方式之一就是语言的使用，但语言和思想有什么关联吗？</li></ul><p>语言相对性理论认为语言培养了思维和知觉的习惯，但针对此的研究众说纷纭，仍在发展。</p><h3 id="为什么我们会做我们所做的事情？"><a href="#为什么我们会做我们所做的事情？" class="headerlink" title="为什么我们会做我们所做的事情？"></a>为什么我们会做我们所做的事情？</h3><p>感情不仅给我们的经历增添了色彩，而且为我们的生活提供了情绪背景，感情是为目的服务的，感情促进了行动，我们常常用当时的感情来解释行动。动机（饥、渴、性）决定了努力的目的，而情绪（高兴、沮丧、愤怒）则反映了我在过程中所体验的感情。动机和情绪是精神机器的动员装置——它们是油缸里的燃料，而我们的行为的方式则是感情同装备的其他部分相互影响的结果。</p><p><strong>动机</strong><br>动机是“有意识或无意识的刺激，它促进行动取向由心理或社会因素提供的期望目标；该目标给出了行为的目的和方向”。</p><p>心理学家用一种明晰的方式将动机分了类，初级动机帮我们满足基本需要。对主观控制它们的企图，这些需要是不会轻易做出反应的，这就是节食为何那么困难的原因；次级动机（弗洛伊德所说的，“荣誉、权利、财富、名声和女人的爱”）是后天习得的。马斯洛认为只要满足了低层次的需要，才会出现高层次的需要。</p><p>在理解我们为什么会做我们所做的事情的时候，两种需要都需要考虑，即内平衡驱动理论和目标理论。</p><ul><li>内平衡驱动理论是说保持一个相对稳定不变的内部环境是十分重要的。如果偏离了这种状态，都会立即要求采取行动来恢复平衡，行动是受不平衡感驱动的。</li><li>目标理论企图用认知因素来解释为什么我们会做我们所做的事情，它认为某人的动机是他有意识地努力去做的事情，即他的目标。目标越难达到，人们就会越努力工作，表现水平也越高。</li></ul><p>在明确初级动机时，认知因素驱动力起了重要作用，在明确次级动机时， 认知因素则更有影响。</p><p><strong>情绪</strong><br>对于情绪，心理学家区分的五个组成部分：有生理上的（心率和血压的变化）、表情上的（微笑、愤怒）、行为上的（握拳、跑开）、认知上的（感知到威胁、危险、失落）和经验上的（体验到复杂的感情）。大多数时候，我们体验到的是混合的情绪，或者是不同程度的情绪。</p><h2 id="固定的样式？"><a href="#固定的样式？" class="headerlink" title="固定的样式？"></a>固定的样式？</h2><p>人们发展最明显的是身体，然而，心理上的发展并不随身体的成熟而停止。发展心理学既要考虑随年龄而出现的变化，又要理解这些变化是怎样发生的。在考虑过程时，需要回答两个问题：</p><ol><li>发展的过程是一个一个展开，还是连续展开的？</li><li>生物的发展是“天性”（控制肉体成熟的遗传）决定的，还是受环境条件（教养）的影响？</li></ol><p>有人说孩子同首要护理者（照料孩子最多的那个人）的联系在决定他以后的心理发展方面是至关重要的。1951年，约翰·鲍尔比说过：“对于婴儿和儿童，母爱对于精神健康就像维生素和蛋白质对于身体健康一样的重要。”</p><p>影响人类依恋最重要的因素是孩子的气质（“天性”）和依恋对象的应答性（对孩子需要的理解和敏感）。</p><p>##个体差异？</p><p>前面关注的是人类典型的发展过程和样式，是人们的相似之处；这里关注人与人之间的差异，主要包括智力和人格。</p><p><strong>智力</strong><br>智力可以被简单地看作是适应环境的能力，但这种适应能力又是多方面的，例如逻辑思维、理性思维、抽象思维、学习能力等。智商是由遗传和环境的影响共同决定的，书中在谈及了智力测试的模型时，表明了其有待发展。</p><p><strong>人格</strong><br>不太严格地讲，人格反映了一些有特点的行为、态度、动机、以及对世界的情感。人格包括人们如何同其他人进行社会交往，而且大家认为人格在一生中是相对稳定的。</p><p>艾森克的方法是把个体差异以及他们固有的与众不同之处结合起来：他用复杂的统计技巧来分析，并把许多人表现出来的几百个特质加以分类（如乐观的、爱挑衅的）。他以二维的方式提出了两组分类：内向性—外向性和稳定—神经质。</p><p>在改进人格和智力测验背后，一个主要的动机就是要预测行为。</p><h2 id="在出问题时，发生了什么？"><a href="#在出问题时，发生了什么？" class="headerlink" title="在出问题时，发生了什么？"></a>在出问题时，发生了什么？</h2><p>前一章关注的是典型的人类行为，其个体差异也在正常范围之内。与此相对，变态心理学关注的是非典型的行为，即精神障碍和精神残疾。</p><p>变态行为的定义是很难界定的，可以从心理学的角度、也可以从医学的角度，更可以从统计规范和社会规范来定义。其分类方式和行为背后的解释也是众说纷纭。</p><h2 id="我们如何相互影响？"><a href="#我们如何相互影响？" class="headerlink" title="我们如何相互影响？"></a>我们如何相互影响？</h2><p>前几部分谈论主体是个人，但是，只有在本质上把人类行为当做社会行为来考虑，才能正确地理解人类的行为，即社会心理学。同样，他人在场也会影响你的行为，有些事你可以在家里做，但是绝不会在公众场合去做。心理学家把这种由他人在场所造成的行为的变化过程称为社会助长。社会助长的一个明显形式就是竞争。一般说来，人们如果相信他们在和某人竞争——即便没有奖赏，他们的表现也会更好。即便在要求人们不要竞争的情况下，若看到有别人在工作（共作效应）或别人看到自己工作（观众效应），人们的工作速度就会加快一些。</p><p>更直接的社会影响就不仅仅包括他人在场，还包括和他人互相影响及做出努力试图改变他人的行为。这可能发生在：一个人企图影响作为整体的一组人时（领导），群体的几个成员鼓励别人采取某个具体态度时（从众），某权威人士企图叫某人满足他的要求时（服从），或某一群体的态度影响他们对另一群体采取的行为时（偏见）。</p><ol><li>领导。心理学家认为，领导的作用主要取决于群体需要一个领袖来完成的那些功能，因此，领导的人格素质或领导风格应该同环境的要求相匹配。例如，在群体条件既不是最好也不是最坏的时候，注重协调关系的领导就对群体比较有益。相反，当群体条件较极端时，爱发号命令、控制型的、注重分派任务的领导反而能产生最大的效益。</li><li>从众。理解领导有助于解释个体对群体的作用，可是群体对个体的作用比想象中的更为复杂。感到来自个人或群体的压力而改变自己的行为或态度，这叫做从众。</li><li>服从。当一个人屈服于群体的压力时，就表现出从众。权威的人物也能造成类似的故事，而满足权威人物的要求就叫服从。</li><li>偏见。群体之间的偏见。偏见是对某一群体的、比较持久的看法。偏见往往与刻板印象相关，刻板印象就是根据一些现成的、可以鉴别的特点，把人们分类，然后据此认为某个群体的个体有某些特点。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>花了整个下午的时间，几乎将该书又重新读了一遍，本文内容大部分都是来源于原读本。在阅读过程中，书中的某些论点，不时地让我有种似曾相识的感觉，但又说不出个所以然来，可见只言片语、断章取义的毒害之深。</p><p>自认为这是心理学入门不可多得的书籍，其行为风格比较客观朴素，辩证地阐述问题观点，少有权威性的结论总结，更多的是陈述事实，注重引导；虽不深入，但作为门外汉，了解单独个体、个体与个体之间以及个体与社会之间的某些潜意识的东西，本书的内容足矣。于情，其内容可以内化，进而来进行心理的自我建设；于理，其写作手段与技巧，足以借鉴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;牛津通识读本之心理学&quot;&gt;&lt;a href=&quot;#牛津通识读本之心理学&quot; class=&quot;headerlink&quot; title=&quot;牛津通识读本之心理学&quot;&gt;&lt;/a&gt;牛津通识读本之心理学&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;牛津通识读本系列 (Very Short Intr
      
    
    </summary>
    
      <category term="阅读与思考" scheme="http://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="阅读；牛津通识读本" scheme="http://www.newtonsz.com/tags/%E9%98%85%E8%AF%BB%EF%BC%9B%E7%89%9B%E6%B4%A5%E9%80%9A%E8%AF%86%E8%AF%BB%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo工作原理</title>
    <link href="http://www.newtonsz.com/2018/03/13/Hexo%E5%8E%9F%E7%90%86/"/>
    <id>http://www.newtonsz.com/2018/03/13/Hexo原理/</id>
    <published>2018-03-13T06:37:42.404Z</published>
    <updated>2018-03-13T07:58:38.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo工作原理"><a href="#Hexo工作原理" class="headerlink" title="Hexo工作原理"></a>Hexo工作原理</h1><p>这段时间几乎都在折腾博客，从博客的搭建、主题配置、购买域名、配置DNS解析到站点SEO、畅言评论系统等等。虽然简单，但当一个符合个人审美的界面呈现至面前时，免不了心生喜悦。</p><p>技术形式百般姿态，如若不解原理，便成了华而不实。知其然，也要知其所以然，这才是做技术应有的态度。</p><p>这篇文章旨在弄懂Hexo博客背后的技术栈以及工作原理。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>博客是一种轻量级的Web应用，包括前端展示和后台处理。</p><ul><li><p>前端框架：基于Node.js的Hexo博客框架，将Markdown处理成静态的HTML页面。</p><blockquote><p><strong>什么是Hexo？</strong><br>Hexo—— A fast, simple &amp; powerful blog framework.</p></blockquote></li><li><p>后台处理：借助Git Pages或Coding Pages提供的静态页面展示功能，即Github的每个仓库都会提供pages的功能，用来展示项目，也可以将其视为Web服务器。</p><blockquote><p><strong>什么是Github Pages?</strong><br>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p></blockquote></li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>安装Hexo的Node.js运行环境、git工具以及配置站点与主题的相关信息。Hexo博客系统的工作流程大致为：</p><ol><li>hexo g：完成Markdown到HTML页面的渲染。</li><li>hexo d：将HTML页面相关文件提交至远程仓库，交由Git Pages展示。</li></ol><p><img src="http://coderunthings.com/images/howhexoworks/deploy.png" alt="Hexo项目"></p><p>整个博客系统可视为两个仓库：</p><ul><li>本地仓库：本地代码库，即基于Node.js的Hexo代码库，换而言之，本地仓库就是用来“开发”博客网站。</li><li>远程仓库：远程结果库，即由Hexo generate所产生的public目录仓库，也就是有关HTML页面的内容。</li></ul><h2 id="本地仓库与远程仓库"><a href="#本地仓库与远程仓库" class="headerlink" title="本地仓库与远程仓库"></a>本地仓库与远程仓库</h2><p>Hexo目录下主要包括以下三个子目录：</p><ol><li>sources目录：该目录是开发者的工作目录，包括Markdown文章以及各种图片资源。</li><li>themes目录：该目录为博客主题样式目录。</li><li>public目录：该目录是由Hexo generate所生成，包括博客所需的html、css、js以及images等显示信息，即远程仓库的内容。</li></ol><h2 id="Hexo-generate和Hexo-deploy"><a href="#Hexo-generate和Hexo-deploy" class="headerlink" title="Hexo generate和Hexo deploy"></a>Hexo generate和Hexo deploy</h2><p>Hexo generate包括两次渲染：</p><table><thead><tr><th style="text-align:center">渲染过程</th><th style="text-align:center">输入</th><th style="text-align:center">渲染引擎</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">第一次</td><td style="text-align:center">source/</td><td style="text-align:center">yml和markdown</td><td style="text-align:center">博客的article</td></tr><tr><td style="text-align:center">第二次</td><td style="text-align:center">article和themes/</td><td style="text-align:center">themes/layouts</td><td style="text-align:center">public/</td></tr></tbody></table><p>Hexo deploy是根据站点配置文件<code>_config.yml</code>来提交public的内容至远程仓库。<br>通过站点配置文件<code>_config.yml</code>（hexo/）和主题配置文件<code>_config.yml</code>（hexo/themes/）可以实现站点和主题的个性化设置。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">博客</a><br><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js 中文网</a><br><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo工作原理&quot;&gt;&lt;a href=&quot;#Hexo工作原理&quot; class=&quot;headerlink&quot; title=&quot;Hexo工作原理&quot;&gt;&lt;/a&gt;Hexo工作原理&lt;/h1&gt;&lt;p&gt;这段时间几乎都在折腾博客，从博客的搭建、主题配置、购买域名、配置DNS解析到站点SEO、畅言
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="技术" scheme="http://www.newtonsz.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(三)——代码框架</title>
    <link href="http://www.newtonsz.com/2018/03/12/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E4%B8%89)%E2%80%94%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/"/>
    <id>http://www.newtonsz.com/2018/03/12/Openstack学习与总结(三)—代码框架/</id>
    <published>2018-03-12T08:27:09.465Z</published>
    <updated>2018-03-22T13:13:30.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（三）：代码框架"><a href="#Openstack学习与总结（三）：代码框架" class="headerlink" title="Openstack学习与总结（三）：代码框架"></a>Openstack学习与总结（三）：代码框架</h1><p>学习Openstack，我的学习方法是以<strong>源码</strong>为核心，参考活跃度极高的 <strong>开源社区</strong>以及规范清晰的<strong>官方文档</strong>为主，其他资源为辅，动手实践贯穿其中。</p><h2 id="Openstack开发基础"><a href="#Openstack开发基础" class="headerlink" title="Openstack开发基础"></a>Openstack开发基础</h2><p>Openstack系统真正意义上运行起来，主要依靠其源码以及源码的运行环境，即所谓的系统开发环境。对于开发人员来说，涉及的基础知识有以下方面：</p><ol><li>Python编程。Python是Openstack的主要开发语言，掌握Python语言的基础语法、高级特性、熟悉各种Python egg包以及调试部署工具等即可。</li><li>Linux环境编程。Openstack系统主要部署在类Unix的操作系统之上，故Linux的基本操作以及环境编程知识是必备的。</li><li>网络基础知识。Openstack的Neutron项目主要涉及网络的管理与配置，故TCP/IP网络基础知识也是不可或缺的。</li><li>虚拟化。虚拟化技术是云计算的基石，理解虚拟化有助于深入理解比较底层系统的运行机制。</li></ol><p>总而言之，计算机五大件是永恒的话题。</p><h2 id="Openstack部署"><a href="#Openstack部署" class="headerlink" title="Openstack部署"></a>Openstack部署</h2><p>对于部署任何项目，其操作步骤不可避免的分为以下几步：</p><ol><li>获得源码。</li><li>配置系统环境以及源码依赖源。</li><li>安装部署。</li><li>HelloWorld测试。</li></ol><h2 id="Openstack源码地图"><a href="#Openstack源码地图" class="headerlink" title="Openstack源码地图"></a>Openstack源码地图</h2><blockquote><p>整体了解，逐个击破。</p></blockquote><p>对于大多数项目而言，它的编译系统基本可看成源码地图，类似的例如Linux内核源码各级目录的<code>Kconfig</code>和<code>Makefile</code>文件，可帮助我们理清代码之间的脉络和联系。OpenStack项目的目录结构并不是根据组件严格划分，而是根据功能划分，Openstack的每个子项目下面都有<code>setup.py</code>和<code>setup.cfg</code> 两个文件，现已nova项目为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.py</span></span><br><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> multiprocessing  <span class="comment"># noqa</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">setuptools.setup(</span><br><span class="line">    setup_requires=[<span class="string">'pbr&gt;=2.0.0'</span>],</span><br><span class="line">    pbr=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>这段代码仅仅只是调用了setup函数，这里使用pbr工具（Python Build Reasonableness）去读取和过滤setup.cfg中的数据，并将解析后的结果作为自己的参数。OpenStack所有项目都是基于Python开发，都是标准的Python项目，通过setuptools工具管理项目，负责Python包的安装和分发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.cfg</span></span><br><span class="line">[metadata]</span><br><span class="line">name = nova</span><br><span class="line">summary = Cloud computing fabric controller</span><br><span class="line">description-file =</span><br><span class="line">    README.rst</span><br><span class="line">author = OpenStack</span><br><span class="line">author-email = openstack-dev@lists.openstack.org</span><br><span class="line">home-page = https://docs.openstack.org/nova/latest/</span><br><span class="line">classifier =</span><br><span class="line">    Environment :: OpenStack</span><br><span class="line">    Intended Audience :: Information Technology</span><br><span class="line">    Intended Audience :: System Administrators</span><br><span class="line">    License :: OSI Approved :: Apache Software License</span><br><span class="line">    Operating System :: POSIX :: Linux</span><br><span class="line">    Programming Language :: Python</span><br><span class="line">    Programming Language :: Python :: <span class="number">2</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">2.7</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">3</span></span><br><span class="line">    Programming Language :: Python :: <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">setup-hooks =</span><br><span class="line">    pbr.hooks.setup_hook</span><br><span class="line"></span><br><span class="line">[files]</span><br><span class="line">data_files =</span><br><span class="line">    etc/nova =</span><br><span class="line">        etc/nova/api-paste.ini</span><br><span class="line">        etc/nova/rootwrap.conf</span><br><span class="line">    etc/nova/rootwrap.d = etc/nova/rootwrap.d/*</span><br><span class="line">packages =</span><br><span class="line">    nova</span><br><span class="line"></span><br><span class="line">[entry_points]</span><br><span class="line">oslo.config.opts =</span><br><span class="line">    nova.conf = nova.conf.opts:list_opts</span><br><span class="line">oslo.config.opts.defaults =</span><br><span class="line">    nova.conf = nova.common.config:set_middleware_defaults</span><br><span class="line">oslo.policy.enforcer =</span><br><span class="line">    nova = nova.policy:get_enforcer</span><br><span class="line">oslo.policy.policies =</span><br><span class="line">    nova = nova.policies:list_rules</span><br><span class="line">nova.compute.monitors.cpu =</span><br><span class="line">    virt_driver = nova.compute.monitors.cpu.virt_driver:Monitor</span><br><span class="line"></span><br><span class="line">console_scripts =</span><br><span class="line">    nova-all = nova.cmd.all:main</span><br><span class="line">    nova-api = nova.cmd.api:main</span><br><span class="line">    nova-api-metadata = nova.cmd.api_metadata:main</span><br><span class="line">    nova-api-os-compute = nova.cmd.api_os_compute:main</span><br><span class="line">    nova-cells = nova.cmd.cells:main</span><br><span class="line">    nova-cert = nova.cmd.cert:main</span><br><span class="line">    nova-compute = nova.cmd.compute:main</span><br><span class="line">    nova-conductor = nova.cmd.conductor:main</span><br><span class="line">    nova-console = nova.cmd.console:main</span><br><span class="line">    nova-consoleauth = nova.cmd.consoleauth:main</span><br><span class="line">    nova-dhcpbridge = nova.cmd.dhcpbridge:main</span><br><span class="line">    nova-idmapshift = nova.cmd.idmapshift:main</span><br><span class="line">    nova-manage = nova.cmd.manage:main</span><br><span class="line">    nova-network = nova.cmd.network:main</span><br><span class="line">    nova-novncproxy = nova.cmd.novncproxy:main</span><br><span class="line">    nova-rootwrap = oslo_rootwrap.cmd:main</span><br><span class="line">    nova-rootwrap-daemon = oslo_rootwrap.cmd:daemon</span><br><span class="line">    nova-scheduler = nova.cmd.scheduler:main</span><br><span class="line">    nova-serialproxy = nova.cmd.serialproxy:main</span><br><span class="line">    nova-spicehtml5proxy = nova.cmd.spicehtml5proxy:main</span><br><span class="line">    nova-xvpvncproxy = nova.cmd.xvpvncproxy:main</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>配置文件为项目的元数据，entry_points是代码的入口，是用来支持动态发现服务和插件的，也用来支持自动生成脚本。console_scripts中的每个entry_points都表示有一个可执行文件脚本会被生成并被安装，即可在控制台上直接执行它，这些entry_points可以理解为整个nova项目所提供各个服务的入口点。</p><p>继续沿着代码的脉络往下走，以nova-compute服务的入口函数为例，即nova.cmd.compute:main。</p><blockquote><p>nova.cmd.compute:main(/nova/cmd/compute.py中的main函数:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config.parse_args(sys.argv)</span><br><span class="line">    logging.setup(CONF, <span class="string">'nova'</span>)</span><br><span class="line">    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))</span><br><span class="line">    utils.monkey_patch()</span><br><span class="line">    objects.register_all()</span><br><span class="line">    gmr_opts.set_defaults(CONF)</span><br><span class="line">    <span class="comment"># Ensure os-vif objects are registered and plugins loaded</span></span><br><span class="line">    os_vif.initialize()</span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"></span><br><span class="line">    cmd_common.block_db_access(<span class="string">'nova-compute'</span>)</span><br><span class="line">    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()</span><br><span class="line">    objects.Service.enable_min_version_cache()</span><br><span class="line">    server = service.Service.create(binary=<span class="string">'nova-compute'</span>,</span><br><span class="line">                                    topic=compute_rpcapi.RPC_TOPIC)</span><br><span class="line">    service.serve(server)</span><br><span class="line">    service.wait()</span><br></pre></td></tr></table></figure><p>由于OpenStack使用python语言开发，而python是动态类型语言，参数类型不容易从代码中看出，因此必须部署一个allinone的OpenStack开发测试环境，建议使用RDO部署：<a href="https://www.rdoproject.org/install/quickstart/" target="_blank" rel="noopener">Packstack quickstart</a></p><p>要想深入研究源码，最有效的方式就是一步一步跟踪代码执行，因此会使用debug工具是关键技能之一。python的debug工具有很多，为了简便起见，pdb工具就够了。使用方法也非常简单，只要在你想设置断点的地方，嵌入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb; pdb.set_trace()</span><br></pre></td></tr></table></figure><p>此时调用创建虚拟机API，nova-api进程就会马上弹出pdb shell，此时你可以通过<code>s</code>或者<code>n</code>命令一步一步执行了。</p><h2 id="Openstack源码通用代码抽象"><a href="#Openstack源码通用代码抽象" class="headerlink" title="Openstack源码通用代码抽象"></a>Openstack源码通用代码抽象</h2><p>通常一个服务的目录都会包含<code>api.py</code>、<code>rpcapi.py</code>、<code>manager.py</code>这个三个是最重要的模块。</p><ul><li><code>api.py</code>： 通常是供其它组件调用的封装库。换句话说，该模块通常并不会由本模块调用。比如compute目录的api.py，通常由nova-api服务的controller调用。</li><li><code>rpcapi.py</code>：这个是RPC请求的封装，或者说是RPC封装的client端，该模块封装了RPC请求调用。</li><li><code>manager.py</code>： 这个才是真正服务的功能实现，也是RPC的server端，即处理RPC请求的入口，实现的方法通常和rpcapi实现的方法一一对应。</li></ul><p>所有的API入口都是从xxx-api开始的，RESTFul API是OpenStack服务的唯一入口，换言之，阅读源码就从api开始。</p><h2 id="虚拟机执行关键步骤"><a href="#虚拟机执行关键步骤" class="headerlink" title="虚拟机执行关键步骤"></a>虚拟机执行关键步骤</h2><p><strong>API节点</strong><br>nova-api接收用户请求 -&gt; nova-api调用compute/api.py -&gt; compute/api调用compute/rpcapi.py -&gt; rpcapi.py向目标计算节点发起stop_instance()RPC请求。</p><p><strong>计算节点</strong><br>收到stop_instance()请求 -&gt; 调用compute/manager.py的callback方法stop_instance() -&gt; 调用libvirt关机虚拟机。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://github.com/Newton1026/openstack-workflow" target="_blank" rel="noopener">Workflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（三）：代码框架&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（三）：代码框架&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（三）：代码框架&quot;&gt;&lt;/a&gt;Openstack学习与总结（三）：代码
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="http://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Openstack学习与总结(二)——框架介绍</title>
    <link href="http://www.newtonsz.com/2018/03/11/Openstack%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93(%E4%BA%8C)%E2%80%94%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.newtonsz.com/2018/03/11/Openstack学习与总结(二)—框架介绍/</id>
    <published>2018-03-11T13:39:24.796Z</published>
    <updated>2018-03-22T13:13:30.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openstack学习与总结（二）：框架介绍"><a href="#Openstack学习与总结（二）：框架介绍" class="headerlink" title="Openstack学习与总结（二）：框架介绍"></a>Openstack学习与总结（二）：框架介绍</h1><blockquote><p>OpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface.(Official)</p></blockquote><p>OpenStack是一个云平台管理的项目，它是AWS的开源实现，代码语言采用Python，属于云计算IaaS层的技术，主要负责管理计算（CPU和内存）、存储以及网络等基础设施资源，附加安全、计量与监控以及控制面板等辅助功能。如下图为Openstack的概念图。<div align="center"><br><img src="https://www.openstack.org/software/images/diagram/overview-diagram.svg" alt="https://www.openstack.org/software/images/diagram/overview-diagram.svg"><br></div></p><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>Openstack系统的发展就是一个利用抽象原则，不断提取通用性的过程，其系统框架主要分为两条线：</p><ul><li>项目之间通过 <a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">REST fulAPI</a> 进行通信；</li><li>项目内部，不同服务进程之间采用基于  <a href="https://baike.baidu.com/item/AMQP" target="_blank" rel="noopener">AMQP模型</a> 的 <a href="https://www.ibm.com/developerworks/cn/cloud/library/1403_renmm_opestackrpc/" target="_blank" rel="noopener">RPC </a> 消息总线的形式进行通信。</li></ul><p>通过这两条线可保证各个项目之间对外提供服务的接口可以被不同类型的客户端支持，同时也保证了项目内部通信的可扩展性和可靠性，以支持大规模的部署。如下图为Openstack的Cinder组件通信示意图。<div align="center"><br><img src="https://www.ibm.com/developerworks/cn/cloud/library/1403_renmm_opestackrpc/image003.gif" alt=""><br></div></p><h2 id="项目组件"><a href="#项目组件" class="headerlink" title="项目组件"></a>项目组件</h2><p>Openstack是一个管理平台，包含众多的项目，具体项目如下：</p><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:center">功能</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">Nova</td><td style="text-align:center">计算组件，控制虚拟机的状态变迁，管理者他们的资源分配，即虚拟机的抽象</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/nova" target="_blank" rel="noopener">Nova</a></td></tr><tr><td style="text-align:center">Swift</td><td style="text-align:center">对象存储组件，比较适合存放静态数据</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/swift" target="_blank" rel="noopener">Swift</a></td></tr><tr><td style="text-align:center">Cinder</td><td style="text-align:center">块存储组件，比较适合存放动态数据</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/cinder" target="_blank" rel="noopener">Cinder</a></td></tr><tr><td style="text-align:center">Neutron</td><td style="text-align:center">网络组件，管理网络资源池，灵活划分和管理物联网络资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/neutron" target="_blank" rel="noopener">Neutron</a></td></tr><tr><td style="text-align:center">Keystone</td><td style="text-align:center">安全组件，服务总线，它为其他组件提供身份管理服务</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/keystone" target="_blank" rel="noopener">Keystone</a></td></tr><tr><td style="text-align:center">Celiometer</td><td style="text-align:center">计量与监控组件，监控与计量资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/ceilometer" target="_blank" rel="noopener">Celiometer</a></td></tr><tr><td style="text-align:center">Horizon</td><td style="text-align:center">控制面板组件，提供了一个模块化的基于Web的图形界面，用户可通过浏览器使用Horizon提供的控制面板来访问和控制计算、存储以及网络资源</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/horizon" target="_blank" rel="noopener">Horizon</a></td></tr><tr><td style="text-align:center">Glance</td><td style="text-align:center">镜像组件，为系统提供镜像服务</td><td style="text-align:center"><a href="https://www.openstack.org/software/releases/ocata/components/glance" target="_blank" rel="noopener">Glance</a></td></tr></tbody></table><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>如下图为Openstack创建云主机的工作流程^[7]^：<br><img src="http://images2015.cnblogs.com/blog/947529/201609/947529-20160913162520398-1054915693.png" alt="Openstack新建云主机流程图"></p><ol><li>界面或命令行通过RESTful API向keystone获取认证信息。</li><li>keystone通过用户请求认证信息，并生成auth-token返回给对应的认证请求。</li><li>界面或命令行通过RESTful API向nova-api发送一个boot instance的请求（携带auth-token）。</li><li>nova-api接受请求后向keystone发送认证请求，查看token是否为有效用户和token。</li><li>keystone验证token是否有效，如有效则返回有效的认证和对应的角色。</li><li>通过认证后nova-api和数据库通讯。</li><li>初始化新建虚拟机的数据库记录。</li><li>nova-api通过rpc.call向nova-scheduler请求是否有创建虚拟机的资源(Host ID)。</li><li>nova-scheduler进程侦听消息队列，获取nova-api的请求。</li><li>nova-scheduler通过查询nova数据库中计算资源的情况，并通过调度算法计算符合虚拟机创建需要的主机。</li><li>对于有符合虚拟机创建的主机，nova-scheduler更新数据库中虚拟机对应的物理主机信息。</li><li>nova-scheduler通过rpc.cast向nova-compute发送对应的创建虚拟机请求的消息。</li><li>nova-compute会从对应的消息队列中获取创建虚拟机请求的消息。</li><li>nova-compute通过rpc.call向nova-conductor请求获取虚拟机消息。（Flavor）</li><li>nova-conductor从消息队队列中拿到nova-compute请求消息。</li><li>nova-conductor根据消息查询虚拟机对应的信息。</li><li>nova-conductor从数据库中获得虚拟机对应信息。</li><li>nova-conductor把虚拟机信息通过消息的方式发送到消息队列中。</li><li>nova-compute从对应的消息队列中获取虚拟机信息消息。</li><li>nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求glance-api获取创建虚拟机所需要镜像。</li><li>glance-api向keystone认证token是否有效，并返回验证结果。</li><li>token验证通过，nova-compute获得虚拟机镜像信息(URL)。</li><li>nova-compute通过keystone的RESTfull API拿到认证k的token，并通过HTTP请求neutron-server获取创建虚拟机所需要的网络信息。</li><li>neutron-server向keystone认证token是否有效，并返回验证结果。</li><li>token验证通过，nova-compute获得虚拟机网络信息。</li><li>nova-compute通过keystone的RESTfull API拿到认证的token，并通过HTTP请求cinder-api获取创建虚拟机所需要的持久化存储信息。</li><li>cinder-api向keystone认证token是否有效，并返回验证结果</li><li>token验证通过，nova-compute获得虚拟机持久化存储信息。</li><li>nova-compute根据instance的信息调用配置的虚拟化驱动来创建虚拟机。<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2></li></ol><blockquote><p>[1] Openstack源码：<a href="https://releases.openstack.org/queens/index.html" target="_blank" rel="noopener">Openstack</a><br>[2] Github源码：<a href="https://github.com/openstack/nova" target="_blank" rel="noopener">Openstack</a><br>[3] Openstack Manuals：<a href="https://docs.openstack.org/queens/" target="_blank" rel="noopener">Openstack</a><br>[4] Openstack wiki：<a href="https://wiki.openstack.org/wiki/Main_Page" target="_blank" rel="noopener">Openstack</a><br>[5] Openstack  Development：<a href="https://developer.openstack.org/" target="_blank" rel="noopener">Openstack</a><br>[6] 创建云主机流程 ：<a href="http://blog.csdn.net/zhongbeida_xue/article/details/54632996" target="_blank" rel="noopener">创建云主机</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Openstack学习与总结（二）：框架介绍&quot;&gt;&lt;a href=&quot;#Openstack学习与总结（二）：框架介绍&quot; class=&quot;headerlink&quot; title=&quot;Openstack学习与总结（二）：框架介绍&quot;&gt;&lt;/a&gt;Openstack学习与总结（二）：框架
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="http://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>资源与工具</title>
    <link href="http://www.newtonsz.com/2018/03/10/%E5%85%83%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.newtonsz.com/2018/03/10/元知识/</id>
    <published>2018-03-10T07:20:12.509Z</published>
    <updated>2018-03-13T14:07:09.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网资源与工具"><a href="#互联网资源与工具" class="headerlink" title="互联网资源与工具"></a>互联网资源与工具</h1><h2 id="元资源"><a href="#元资源" class="headerlink" title="元资源"></a>元资源</h2><p>所谓元资源就是资源的资源，即第一手资源，类似第一性原理。这里主要列出课程、演讲、论文以及书籍。</p><ul><li><strong>课程</strong></li></ul><ol><li><a href="https://www.coursera.org/" target="_blank" rel="noopener">coursera</a> 主要收录一些国外的经典课程。</li><li><a href="https://www.coursera.org/" target="_blank" rel="noopener">stanford</a> 斯坦福大学的一些公开课程。</li><li><a href="https://ocw.mit.edu/courses/" target="_blank" rel="noopener">MIT</a> 麻省理工学院的公开课程。</li><li><a href="https://www.lynda.com/" target="_blank" rel="noopener">lynda</a> 在线课程。</li><li><a href="https://open.163.com/" target="_blank" rel="noopener">网易公开课</a> 国内网易公开课。</li></ol><ul><li><strong>演讲</strong></li></ul><ol><li><a href="http://videolectures.net/" target="_blank" rel="noopener">videolectures</a> 足不出户听遍最新学术讲座。</li><li><a href="https://www.ted.com/" target="_blank" rel="noopener">TED</a> 关注其playlists。</li><li><a href="http://www.tedtochina.com/" target="_blank" rel="noopener">TEDtoChina</a> TED的中文翻译，如果英语不够好。</li></ol><ul><li><strong>论文</strong></li></ul><ol><li><a href="http://paulgraham.com/" target="_blank" rel="noopener">paulgraham</a> 保罗·格雷厄姆，美国著名程序员、风险投资家、博客和技术作家。他以Lisp方面的工作而知名，也是最早的Web应用Viaweb的创办者之一。</li><li><a href="http://www.mlsurveys.com/" target="_blank" rel="noopener">Machine Learning Surveys</a> 机器学习的有关论文。</li><li><a href="http://gen.lib.rus.ec/" target="_blank" rel="noopener">Library Genesis</a> 文献检索。</li><li><a href="https://normaldeviate.wordpress.com/2012/12/21/guest-post-rob-tibshirani/" target="_blank" rel="noopener">Normal Deviate</a> 机器学习最有影响的论文。</li><li><a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">semanticscholar</a> 文献检索。</li><li><a href="https://www.plos.org/" target="_blank" rel="noopener">plos</a> 最新的研究论文成果检索。</li><li><a href="http://www.cnki.net/" target="_blank" rel="noopener">中国知网</a> 国内的学术论文库。</li></ol><ul><li><strong>书籍</strong></li></ul><ol><li><a href="https://openstax.org/subjects" target="_blank" rel="noopener">openstax</a> 莱斯大学的一所免费教科书出版商。</li><li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩</a> 电子书搜索引擎。</li><li><a href="http://forfrigg.com/#gsc.tab=0" target="_blank" rel="noopener">Kiddle电子书</a> Kiddle电子书资源。</li><li><a href="https://iask.sina.com.cn/" target="_blank" rel="noopener">新浪共享电子书</a> 新浪共享电子书。</li><li><a href="https://global.oup.com/academic/content/series/v/very-short-introductions-vsi/?cc=cn&amp;lang=en&amp;" target="_blank" rel="noopener">牛津通识读本</a> 各个学科的了解。</li></ol><h2 id="优秀博客"><a href="#优秀博客" class="headerlink" title="优秀博客"></a>优秀博客</h2><p>优秀的博主都有一个共同的特点，即拥有庞大的阅读量，并坚持长期写作的习惯，不同的只是写作风格。</p><ol><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a> 国内科技博客第一人。</li><li><a href="http://www.yangzhiping.com/" target="_blank" rel="noopener">阳志平</a> 安人心智科学总监，从事认知科技产品研发与项目孵化。</li><li><a href="https://coolshell.cn/" target="_blank" rel="noopener">陈皓</a> 个人技术博客，现在创业。</li><li><a href="https://blog.youxu.info/" target="_blank" rel="noopener">徐宥 </a> 华盛顿大学人工智能博士，南京大学数学学士，现在创业。</li><li><a href="http://blog.farmostwood.net/sitemap" target="_blank" rel="noopener">木遥</a> 软件工程与数学，博士。</li><li><a href="http://www.changhai.org/" target="_blank" rel="noopener">卢昌海</a> 物理学博士。</li><li><a href="http://www.maguang.net/" target="_blank" rel="noopener">马光</a> 历史与社会关系，在校教师。</li><li><a href="http://anzhu.net/" target="_blank" rel="noopener">安猪</a> 美学研究，写作与读书。</li><li><a href="http://www.pzhao.org/zh/" target="_blank" rel="noopener">赵鹏</a> 草根到精英，农村到城市，中国河南人，目前在因斯布鲁克大学生态学院从事博士后研究工作，专业是大气研究。</li><li><a href="http://mednoter.com/" target="_blank" rel="noopener">吕小荣</a> Ruby开发者，做过医生和产品经理。</li><li><a href="http://www.yue366.com/" target="_blank" rel="noopener">肖月</a> 学术界研究者，铁路博士。</li><li><a href="https://www.music4x.com/" target="_blank" rel="noopener">老罗的博客</a> 生活百科。</li><li><a href="http://cn.derekyang.us/" target="_blank" rel="noopener">戴睿可</a> 传媒人，现居美国。</li><li><a href="https://zenhabits.net/" target="_blank" rel="noopener">zenhabit</a> 将禅学应用到生活中，英文博客。</li><li><a href="http://www.raychase.net/allarticles" target="_blank" rel="noopener">四火的唠叨</a>  程序猿，他一个伟大的愿望。我希望凭借自己的努力，净化程序员的环境，提升程序员的地位。愿IT界再无黑心企业的剥削，无人自嘲“码农”、“码畜”，技术人员受到足够尊重，写程序重新成为一种创造性的劳动。软件行业，重新成为令人羡慕的行业。自由、开放、创新、包容。</li><li><a href="https://justyy.com/" target="_blank" rel="noopener">小懒人的英国生活和资讯</a> 英国生活。</li><li><a href="https://chenghouwen.com/about" target="_blank" rel="noopener">程厚文</a> 传统朴素写作风格，伊凡克里玛说：写作，是一个人能够成为一个人最重要的途径之一。我经营和管理的这个个人网站，严格意义上来讲还算不得是系统性的写作，但是也多少可以让人有点与众不同的感觉。另外，生活的本身是无趣的，我想尽量榨取点有趣出来，我坚持以有趣打败时间。</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>工欲善其事必先利其器，好的利器，配上专业的术，并将道贯穿其中，将所向披靡，无往不胜。</p><ol><li><a href="https://stackexchange.com/sites" target="_blank" rel="noopener">stackexchange</a> 你要问的都在上面。</li><li><a href="https://leetcode.com/" target="_blank" rel="noopener">leecode</a> 训练算法思维和编程技巧。</li><li><a href="https://github.com/" target="_blank" rel="noopener">github</a> 最聪明的程序猿都在上面，开源第一。</li><li><a href="https://hinative.com/zh-CN" target="_blank" rel="noopener">hinative</a> 学习语言。</li><li><a href="https://www.englishpage.com/verbpage/verbs1.htm" target="_blank" rel="noopener">口语写作练习</a> 在线语言练习。</li><li><a href="https://fontawesome.com/icons" target="_blank" rel="noopener">图标制作</a> icons制作。</li><li><a href="https://weibomiaopai.com/?ref=tumutanzi" target="_blank" rel="noopener">各大视频软件视频下载</a> </li><li><a href="typora">Typora</a> markdown编辑与阅读工具。</li><li><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a> 设计作品。</li><li><a href="https://www.edge.org/" target="_blank" rel="noopener">Edge</a> 科普网站。</li><li><a href="https://m.imdb.com/?ref_=m_nv_home" target="_blank" rel="noopener">IMDB</a> 电影评分。</li></ol><h2 id="云产品"><a href="#云产品" class="headerlink" title="云产品"></a>云产品</h2><ol><li><a href="https://imgur.com/" target="_blank" rel="noopener">图床</a>  图片存储，图片外链。</li></ol><ul><li><a href="https://imgur.com/" target="_blank" rel="noopener">图床</a> </li><li><a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>：国内SaaS云服务商，10G 免费<strong>流量</strong>，配合图床工具<a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPic</a>上传图片十分方便。</li><li><a href="https://cloudinary.com/" target="_blank" rel="noopener">cloudinary</a>：国外的云产品，支持在线图片处理。</li></ul><ol><li>本地同步存储  本地文件夹同步。</li></ol><ul><li><a href="https://www.dropbox.com/h" target="_blank" rel="noopener">Dropbox</a> 国外的产品，需要翻墙。</li><li><a href="https://www.jianguoyun.com/" target="_blank" rel="noopener">坚果云</a> 国外的Dropbox，流量不多。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网资源与工具&quot;&gt;&lt;a href=&quot;#互联网资源与工具&quot; class=&quot;headerlink&quot; title=&quot;互联网资源与工具&quot;&gt;&lt;/a&gt;互联网资源与工具&lt;/h1&gt;&lt;h2 id=&quot;元资源&quot;&gt;&lt;a href=&quot;#元资源&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="资源与工具" scheme="http://www.newtonsz.com/categories/%E8%B5%84%E6%BA%90%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="元知识" scheme="http://www.newtonsz.com/tags/%E5%85%83%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>云计算概述</title>
    <link href="http://www.newtonsz.com/2018/03/05/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.newtonsz.com/2018/03/05/云计算概述/</id>
    <published>2018-03-05T07:54:22.315Z</published>
    <updated>2018-03-23T02:29:52.348Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！</p><p>&ensp;&ensp;&emsp;如果翻翻计算机技术的发展历史，几乎任何看似新的技术都有与之相对应的概念，只是当时的条件限制了其发展。随着计算能力的增强、存储空间的扩大以及网络带宽的提升，云计算的出现也就水到渠成了。</p><p><img src="https://i.loli.net/2018/03/23/5ab46329bb778.jpg" alt="云计算"></p><p>&ensp;&ensp;&emsp;云计算一般被定义在网络环境下计算资源的交付和使用方式，用户通过网络按需、易扩展的方式获得所需服务。换言之，即将处于整个互联网的空闲计算资源调度并集中起来，服务于某一台终端计算机，实现终端的处理能力提升。其本质就是服务的交付，也是能力的交付，其基本思想是资源的打散重组、灵活调度。云计算一般的支撑条件包括：1）足够的带宽网络；2）资源“池化”，按需伸缩的弹性机制；3）服务自治；4）后台自适应这种变化；5）按使用量计算成本。</p><p>&ensp;&ensp;&emsp;抽象思维是计算机领域的重要思想，底层被抽象成接口服务提供给上层调用，进而屏蔽掉底层的实现细节，一切资源都可以封装成服务。云计算服务交付模式可分为IaaS基础设施即服务、PaaS平台即服务以及SaaS软件即服务。IaaS是云服务的最底层，主要提供一些诸如计算、存储以及网络的基础设施；PaaS是云服务的中间层，主要提供软件部署平台及运行环境，抽象掉了硬件和操作系统的细节，可以无缝地扩展，用户只需关注自身的业务逻辑，无需关注底层；SaaS是云服务的最上层，它是软件的开发、管理以及部署都交给第三方，不需要关注技术问题，拿来即用。云计算的部署方式包括公有云、私有云、混合云以及社区云等。总而言之，云计算就是将计算资源、存储资源、网络资源以及安全服务抽象成可交付的服务。<img src="http://img.yixieshi.com/wp-content/uploads/2018/02/1519615359-3380-2502701-35610405054031c4.jpg?imageslim|imageView2/2/w/1000/h/563/interlace/1/q/70" alt=""></p><p>&ensp;&ensp;&emsp;云计算的实现紧紧地依托于虚拟化和分布式计算两项关键技术，虚拟化解决物理资源与用户使用解耦的问题，分布式计算解除用户和大型应用系统之间的绑定关系，两者的本质都是将资源和利用进行解耦，从而提升资源利用的自由度。云计算基础设施方面——云计算数据中心设计与管理及资源虚拟化技术；大规模数据处理方面——海量数据处理平台即其资源管理与调度技术；云计算服务保障方面——服务质量保障和安全与隐私保护技术。<br><img src="http://img.yixieshi.com/wp-content/uploads/2018/02/1519615362-3305-2502701-5903e6fd91929981.jpg?imageslim|imageView2/2/w/1000/h/563/interlace/1/q/70" alt=""><br>&ensp;&ensp;&emsp;云计算是一个比较庞大的生态系统，包括上游的云服务用户、中游的I-P-S各层云服务平台提供商以及下游的设备及网络提供商，不同行业均在建设属于自己的行业解决方案，即行业云，颠覆传统IT基础设施；整个生态技术类的岗位包括基础架构设计、应用开发、平台开发、平台运维以及安全类的服务保障等：<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（1）基础架构设计：涉及自动扩展、负载均衡、虚拟化以及容器类的计算服务，涉及DNS/CDN的网络服务，以及网络存储、对象存储、块存储以及灾备恢复的存储服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（2）应用开发：涉及Web应用、桌面虚拟化、移动应用以及IoT的前端应用，高性能计算和渲染的后端应用，以及类似CRM、ERP和生物科学的行业应用。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（3）平台开发：涉及操作系统、数据管理（SQL、缓存、检索、大数据以及机器学习）、身份认证以及包括日志和监控的管理服务。<br>&ensp;&ensp;&emsp;&ensp;&ensp;&emsp;（4）平台运维：涉及包含持续交付和持续集成的DevOps、配置以及部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;谈及职业发展，我目前尚未对此形成主线；但对于云计算，它很可能成为我职业生涯的起点。故在正式入职之前，提前对云计算做了简单的了解，也算是预热吧！&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;如果翻翻计算机技术的发展历史，几乎任何看似新
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="云计算" scheme="http://www.newtonsz.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>浅谈科技论文之写作方法</title>
    <link href="http://www.newtonsz.com/2018/03/03/%E6%B5%85%E8%B0%88%E7%A7%91%E6%8A%80%E8%AE%BA%E6%96%87%E4%B9%8B%E5%86%99%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://www.newtonsz.com/2018/03/03/浅谈科技论文之写作方法/</id>
    <published>2018-03-03T10:47:35.059Z</published>
    <updated>2018-03-10T05:59:45.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「世事洞明皆学问-人情练达即文章」"><a href="#「世事洞明皆学问-人情练达即文章」" class="headerlink" title="「世事洞明皆学问 人情练达即文章」"></a><center>「世事洞明皆学问 人情练达即文章」</center></h1><p>&ensp;&ensp;&emsp;在深大念硕士研究生的三载时光，大大小小的写作训练不在少数，其中包括期刊论文，专利论文，企业项目申请书以及硕士毕业论文等，姑且不谈论文内容质量之高低，但写作的方法以及行文的套路尚且值得一说。</p><p>&ensp;&ensp;&emsp;科技论文的写作目的在于给予专业人士以启发，提供工程实践以价值。此番目的就奠定了科技论文的写作基调：内容之客观真实、形式之清晰可读。客观真实表明论文所研究的内容和结论须可重现，不存在捏造数据的不端现象；清晰可读说明论文须具备逻辑严谨、结构清晰的特点，行文风格上须显专业，其不同于科普文章，科技论文的读者是该领域的专业人士，遣词琢句尽量使用行业专业术语，此类文章并非老少皆宜。</p><p>&ensp;&ensp;&emsp;在论文的内容上，高低优劣就得看个人造诣了，正所谓“冰冻三尺非一日之寒”，个人平时的积累和总结是必不可少的，任何的创新以及好的想法都并非无水之源、无木之本，永远都是台前幕后的故事。说到创新，记得上课之时老师有谈及过，说做研究就好比爬山，无外乎两条路：一是沿着一条路不断深入，直到爬到山顶；一是多走几条路，拼拼凑凑或许也能爬到山顶。大概意思是说为了取得某种结果或现象，要么沿着一种策略不断深入研究，要么多借助几种现有的策略，将其排列组合形成一种新的策略。在写作内容上，我才疏学浅，并无成就，故不敢胡言。</p><p>&ensp;&ensp;&emsp;在论文形式的安排上，要做到文章逻辑清晰可读是有迹可循的，属于工程实践的范畴。站在读者的角度、沿着论文的主题去行文是论文结构安排的首要原则，有了这个基本原则，文章的逻辑就可以按照“总-分-总”的结构来填充，即先整体搭好框架，然后斟酌细节，最后排查全文。一般科技论文由目录、摘要、正文、总结以及参考文献所构成，其中正文一般由研究的意义和背景、国内外研究现状、相关理论叙述以及核心算法论证等部分组成，核心算法论证部分又可分为模型建立、算法论证以及实验分析等。文章的骨架是其目录结构，其主题是摘要，所以，目录结构和摘要的书写就成了全文的奠基工程。</p><p>&ensp;&ensp;&emsp;（一）摘要。摘要是全文的高度提炼与总结，其组织安排可按照如何回答如下的几个问题的形式而展开：该研究是在怎样的行业背景下进行的？它需要解决什么样的问题或难题？针对该问题提出了怎样的解决措施？该措施运用了什么样的方法和策略？经验证该措施得到的结果或量化指标怎么样？还存在哪些不足与值得改进的地方？这样层层逼近，环环相扣，摘要的整体脉络也就托盘而出了，后续对其语句进行精炼调整即可。</p><p>&ensp;&ensp;&emsp;（二）正文与总结。正文是摘要的详细描述，首先是研究的意义和背景，说明该研究的来源、社会背景以及研究的意义所在，此处的行文基调应做到与时俱进，利国利民；然后是国内外研究现状，指出国内外研究者针对该课题最新的研究进展，采用总结与评判的方式来概要论述，既要看到其闪光点，也要发现其不足之处；紧接着是课题研究所涉及的相关理论进行说明，此处秉着“站着巨人的肩膀上”的态度即可，只提结论，不问缘由，公式化理论行文风格；然后是核心算法论证部分，从问题的提出到模型的构建，从算法的推导到论证分析，从仿真分析到具体验证，该部分是论文的核心与精华所在，此处应是图文并茂、逻辑流畅以及拥有数学之美的行文风格，一切以数据说话；最后是总结与展望，总结全文的研究内容，展望课题的不足并结合相关理论给出改进的方向，无需涉及细节，其行文基调应是不卑不亢、积极上进以及谦虚并抱有敬畏之心。</p><p>&ensp;&ensp;&emsp;以上论述仅从自身写作经验所抽离出来的拙见，仅作总结回顾之用，如有不足与错误之处，日后定当努力端正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「世事洞明皆学问-人情练达即文章」&quot;&gt;&lt;a href=&quot;#「世事洞明皆学问-人情练达即文章」&quot; class=&quot;headerlink&quot; title=&quot;「世事洞明皆学问 人情练达即文章」&quot;&gt;&lt;/a&gt;&lt;center&gt;「世事洞明皆学问 人情练达即文章」&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="阅读与思考" scheme="http://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="http://www.newtonsz.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>计算机知识体系</title>
    <link href="http://www.newtonsz.com/2018/02/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://www.newtonsz.com/2018/02/24/计算机知识体系/</id>
    <published>2018-02-24T14:49:31.726Z</published>
    <updated>2018-03-10T07:17:40.775Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；再次需要进行触类旁通，灵活运用以往的知识来理解、分析该项技术，理解其本质；最后进行比较权衡，用最高效的手段去解决它。</p><p>&ensp;&ensp;&emsp;计算机知识可分为三大类别：基础知识、领域知识以及工具化知识。基础知识即程序猿必须要掌握的通识性质的内容；领域知识即程序猿从事的技术方向的知识；工具化知识即程序猿职业生涯中实践所得的一些提高工作效率的碎片化知识。<br>&ensp;&ensp;&emsp;一、基础知识主要是数学+计算机五大件。程序猿工作中大量的内容都是业务相关的，所涉及的数学知识较少，但如果想要得以发展，精研某一方面则需要扎实的数学功底，否则这份工作就有天花板，也就容易被人替换。程序猿用到的数学，总结起来，主要是微积分、线性代数以及概率论三门课程。计算机五大件包括计算机组成原理、数据结构、操作系统、计算机网络以及编译原理，这五大件是从事IT领域所必备的基础知识。此外，掌握若干种编程语言，包括静态/动态、面向过程/面向对象、编译型/解释型。最后是软件工程的内容，如何写出艺术般的代码。<br>&ensp;&ensp;&emsp;二、领域知识。不同的方向需要掌握不同的领域知识。首先需要对该领域在业界的发展情况以及技术全景有所了解，然后是找到该领域存在的问题，最后通过自身的努力去解决问题。最终，使得自己的“T”型知识体系的纵向不断延伸。<br>&ensp;&ensp;&emsp;三、工具化知识。工具化知识即提升工作效率的工具或习惯，这个需要平时的积累和总结。</p><p>&ensp;&ensp;&emsp;如果套用“T”型知识管理体系，可以将基础知识看作是构成“T”型的原材料，领域知识看作是纵向的深度，而工具化知识看作横向的广度。原材料是基础，纵向的深度是支撑，横向的广度可以起到如虎添翼的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;emsp;面对新事物，新技术，亦或是新的问题，如何做到深入理解，快速解决，及时消化？首先要克服心理上的恐惧，所谓的新，其实只是换了个说法，本质上的东西依然未变；然后，利用分层抽象的思维来判断其所处的层次，是属于应用层的业务，还是属于底层的通用知识；
      
    
    </summary>
    
      <category term="程序与算法" scheme="http://www.newtonsz.com/categories/%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="技术" scheme="http://www.newtonsz.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="http://www.newtonsz.com/2018/02/05/%E9%98%85%E8%AF%BB/"/>
    <id>http://www.newtonsz.com/2018/02/05/阅读/</id>
    <published>2018-02-05T11:24:09.227Z</published>
    <updated>2018-03-13T07:58:38.154Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><img src="http://res.cloudinary.com/newton/image/upload/v1520857965/%E7%99%BD%E9%B9%BF.jpg" alt="白鹿"><br></div><h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a><center>一、绪论</center></h1><p>&ensp;&ensp;&emsp; 年前，在写论文的闲暇之时，翻了几本书，深感纸上得来终觉浅，于是就现学现卖，也算是活学活用吧。用《如何阅读一本书》中的方法论去解读《人生的智慧》和《穷查理宝典》，用《人生的智慧》中的观点来审视《穷查理宝典》，用《穷查理宝典》中多元思考模型和逆向思维来梳理《人生的智慧》和《如何阅读一本书》的行文脉络，最终得出的结论是《人生的智慧》是一本值得反复阅读的书籍。</p><p>&ensp;&ensp;&emsp;一般来说，获得知识经验有两种方式：一方面是通过个人的实践来直接获得感性认识，并通过理性地思考和总结而获得；另一方面是通过阅读和交流来间接获得前人的经验，加上自己的筛选和总结，进而内化。前者要想做到并非易事，事事追求亲力亲为的做法成本过高；而相对来说，后者便是一种可行并无门槛的做法，通过阅读前人毕其一生所完成的积累，跨越时空的限制，获得间接经验和智慧。人是非常渺小的生物，在世不过百年，每个人都不得不遵循这个恒定的时间限制，但，阅读也许是超越这个限制的方法。</p><h1 id="二、《人生的智慧》"><a href="#二、《人生的智慧》" class="headerlink" title="二、《人生的智慧》"></a><center>二、《人生的智慧》</center></h1><p>&ensp;&ensp;&emsp;关于人生的话题，德国哲学家叔本华在《人生的智慧》中谈到了本质。总体来说，人生的智慧，即如何才能幸福快乐地度过短暂的一生的话题，但叔本华的本意其实是在谈如何有效地避免生活中的痛苦的话题，因为幸福是否定的，痛苦才是人生的本质，与其苦苦追求所谓的幸福，不如学会如何有效地避免伤痛与疾苦。</p><p>&ensp;&ensp;&emsp;作者首先将人作了基本的划分，作为社会的人具体由诸如健康、性情以及智力组成的人的自身，这是第一性的；然后是人所拥有的财产，这里指钱财的相对数量；最后是人所展现的表象，包括名誉、地位和名声，这些仅仅是为了获得利益和保护自己而采取的具体手段，不是目的。</p><p>&ensp;&ensp;&emsp;然后，谈到个人如何面对自己、他人以及命运世事发展的话题。首先是如何与自己相处，一个充足完备的人应当是一个独立的统一体，而不是人的一个统一体的一部分，所能拥有的就在其自身，归根到底所能寄希的也只有自己，所以孤独是正常的，并且是需要学会的。“把社会人群比喻为一堆火，明智的人在取暖的时候懂得与火保持一段距离，而不会像傻瓜那样太过靠近火堆；后者在灼伤自己以后，就一头扎进寒冷的孤独之中，大声地抱怨那灼人的火苗”。作为第一性的划分，需要清楚了解自己的首要和真正的意愿，选择合适的职业和角色，并且活在当下，从而来增强个人第一性的划分。接着是个人如何面对他人，“心中只有自己，眼中却只有他人”是个明智的做法，因为每个人都脱离不了主体的“我”，每个人只能根据自己的思想智力去明白和理解他人，并且人都有其双面性；保持礼貌和沉默是避免伤害和保护自己的好办法；有时候推己及人、换位思考的办法可以更好地理解他人的行为。最后是个人如何面对命运和世事的发展，明白变化是事物发展的本质，应牢记时间的作用和事物昙花一现的本质。“一个明智之人其实就是一个不会被事物的恒久不变的表面所欺骗的人”。谈到了运气的利害性，明智、力量和运气，其中运气至关重要。“人生好比乘舟，个人的努力奋斗和挣扎就像桨橹，而运气之重要好比风向”，再请多一点勇气。</p><p>&ensp;&ensp;&emsp;最后是阐述了人生的各个阶段，人生大多时候像是在痛苦和无聊之间作来回摆动的运动，痛苦和无聊是双重对立的关系，其分为内在和外在的，痛苦来自生活的艰辛匮乏，而无聊来源于丰裕安定，这是外在的；丰富内在的人大多是痛苦的，精神迟钝的人大多是无聊的，这是内在的。在无聊和痛苦之间寻求平衡点，而这个平衡点就是闲暇。谈到人生的各个阶段，“一个人如果没有他那种年龄的神韵，那他也就会有他那种年龄特定的种种不幸”。人生的前半生是对幸福的苦苦追求，人的后半生是对遭遇不幸的害怕和担忧。童年时期，一切都是新奇的，一以类千，习惯用永恒的一面看待人和事，是一种从远处看舞台布景的诗意视角；到了青年时代，个人会受意欲的控制，苦苦追求所谓的幸福而不得，由此产生不满的情绪；中年时期，思想趋于成熟，开始逐渐摆脱偏见，以一种朴素和客观的视角去看待人和事，克服童年时期的直观和青年时期的意欲；而到了老年时期，人的需求逐渐变少，思维活动较丰富，以一种从近处审视舞台布景的客观视角，摆脱了幻想、假象和偏见。叔本华建议个人在年轻精力旺盛时，通过阅读和经历丰富自己的大脑，同时注意积累相对数量的财富，同时生活上的节制更有助于加强生命力，如果能有幸免于疾病的困扰，老年生活将是无比安宁和满足。</p><p>&ensp;&ensp;&emsp;总体来说，我对书中的观点是比较认可的，并且经得起实践的检验，大多数的个人活动都符合书中所谈。最让我惊讶的是关于人的两大痛苦的本质概括，如此的精确和契合。于我而言，这本书让我豁然开朗，一方面让我更加了解并理解自身的心理活动，如此便会懂得如何和自己和谐相处；另一方面，对人的心理诉求有了些许的认识，使得自己能够以更加安全的方式与他人相处，坚定地以一种朴素客观的视角去看待人和事，还原实物发展的本质；同时，面对命运和世事的发展，本着一种“但行好事，不问前程”的态度。</p><h1 id="三、《如何阅读一本书》"><a href="#三、《如何阅读一本书》" class="headerlink" title="三、《如何阅读一本书》"></a><center>三、《如何阅读一本书》</center></h1><p>&ensp;&ensp;&emsp;写到这里，关于叔本华的《人生的智慧》一书的主要内容大致说清楚了。其实，关于行文的脉络，完全参考《如何阅读一本书》的意思展开的，成甲说，“一切的学习和努力无非三个目标：一是解释问题，二是解决问题，三是预测问题。”，如何阅读一本书，首先应明确阅读的目标是什么？是为了获得资讯还是为了求得增加理解力而读；然后需判断所读之书是何种类型，是实用性还是理论性的。以上两点是在深入阅读之前就需要明确的；至于怎么读的问题，具体可以分为四个层次：①以理解语言、解文识字为目的的基础阅读；②在规定时间内的略读，即检视阅读；③系统全盘化的分析阅读；④通过发散、关联和比较的主题阅读。作者花了大量篇幅解读了分析阅读的细节，也推荐读者追求此层次的阅读。关于阅读之后的处理，需要谨慎地回答四个问题：1）整体来说，这本书到底在谈论什么？2）作者在细节上说了什么，怎么说的？3）这本书说的有道理吗，全部还是部分？4）这本书与我有什么关系？</p><h1 id="四、《穷查理宝典》"><a href="#四、《穷查理宝典》" class="headerlink" title="四、《穷查理宝典》"></a><center>四、《穷查理宝典》</center></h1><p>&ensp;&ensp;&emsp;关于叔本华《人生的智慧》一书，核心思想是个人如何幸福愉快地度过一生的艺术，而作者却是在从反面来阐述个人如何有效地避免痛苦，这点正是查理·芒格极力推崇的逆向思维，一个问题如果正向比较棘手，反向的视角可能就豁然开朗，迎刃而解。《穷查理宝典》是有关方法论的应用书籍，读这本的目的就是想增强自己的理解力，顺带实践下《如何阅读一本书》中的读书方法论。该书是根据查理·芒格的言谈、演讲以及在商业领域的一些实践所整理的，类似于中国古代《论语》的行文风格，其核心思想是书中反复强调的多元思维模型，这是一种以生态系统的视角来看待问题的方法，将多种思维模型结合，从而进行多方位、多维度的分析，并由此来提高成功解决问题的概率，所以说，建立多元的思考模型，就是为了降低诸如锤子思维（一个手里拿着铁锤的人，他们往往会认为世界就是一颗钉子）这种单一维度的思考而引发错误决策产生的概率。</p><p>&ensp;&ensp;&emsp;在芒格看来，世间宇宙万物都是一个相互作用的整体，只有把不同学科的知识结合起来，并贯穿在一个思想框架中，才能对正确的认知和决策起到帮助作用。<br>&ensp;&ensp;&emsp;一是，要突破学科的界限。“我是真的呼吁你们不要理会学科的法定界限。这个世界并不是按照跨学科的方法组织起来的，这个世界要求我们跳出学科的法定范围。”芒格说。<br>&ensp;&ensp;&emsp;二是，要能融会贯通使用。“大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。你知道谚语是怎么说的：在手里拿着铁锤的人看来，世界就像一颗钉子。这是处理问题的一种笨办法。”芒格说。<br>&ensp;&ensp;&emsp;突破学科界限，将不同学科的知识融会贯通使用，就可以在此基础上形成“普世智慧”。比如诸如各个学科的思想模型——数学（复利，排列组合，高斯分布，幂律效应）、物理（断裂点理论，临界质量）、工程学（后备系统）、计算机信息科学（规模优势理论，信息优势理论）、心理学（误判心理学）、生物/生理学（自然选择，适者生存）、微观经济学（边界效应递减）等等。</p><p>&ensp;&ensp;&emsp;在分析问题的时候，利用双轨思维，首先，理性地看，哪些因素真正控制了涉及的利益？其次，当大脑处于潜意识状态时，会自动形成哪些潜意识因素——这些潜意识因素总的来讲有用但（在具体情况下）却又常常失灵？</p><p>&ensp;&ensp;&emsp;以上仅仅阐述了书中关于多元思维模型的细节，回答了书中关于多元思维模型的种种细节问题；整本书读下来，真正能让我内化并吸收的可能就是对逆向思维和多元思维模型的阐述，因为一件事发生了，并没有规定它会落在哪个学科上，不同的人有不同的解读，也就无需理会学科之间的法定界限；至于与我有何关系，我想更多是开阔思维吧，也打破了我对陌生领域知识的畏惧心理，多去接触不同行业的人群，阅读不同领域的读物，以便利用多元思维模型去更好的理解事物发展的本质，最终避免生活中不幸与痛苦。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a><center>五、总结</center></h1><p>&ensp;&ensp;&emsp;都说做事情要讲究策略，坚持就是最好的策略（小土刀）。希望自己以此为起点，持之以恒地阅读、思考与写作，并能够持续地输出。最后借古人之智慧，作鲲鹏之势——“士人有百折不回之真心，才有万变不穷之妙用。立业建功，事事要从实地着脚，若少幕声闻，便成伪果；讲道修德，念念要从虚处立基，若少计功效，便落尘情。”                                                                      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://res.cloudinary.com/newton/image/upload/v1520857965/%E7%99%BD%E9%B9%BF.jpg&quot; alt=&quot;白鹿&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1
      
    
    </summary>
    
      <category term="阅读与思考" scheme="http://www.newtonsz.com/categories/%E9%98%85%E8%AF%BB%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    
    
      <category term="阅读" scheme="http://www.newtonsz.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
